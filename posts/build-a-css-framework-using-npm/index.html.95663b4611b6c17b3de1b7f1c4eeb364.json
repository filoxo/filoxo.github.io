{"head":{"title":"Building a CSS framework using npm","date":"2017-02-14T00:00:00.000Z","layout":"Post","hero":"/assets/leaves.jpg","description":"This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is Simple Styleâ€¦"},"body":"<p>This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is <a href=\"https://github.com/filoxo/simple-style\">Simple Style</a> (which is still a WIP as requirements come up). Surprisingly, using <a href=\"https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.5w4loc8uy\">npm as a build tool</a> made it extremely easy to set up a dev environment. I'll review everything about the setup in this post for my own documentation, but hopefully can also serve as a clean, straightforward example.</p>\n<p>I used <code>yarn</code> for this experiment instead of <code>npm</code> solely for the speed improvements. Fortunately, <code>yarn</code>'s commands all have their <code>npm</code> equivalents so don't get hung up on the differences.</p>\n<h3 id=\"dev-dependencies\"><a href=\"#dev-dependencies\" class=\"phenomic-HeadingAnchor\">#</a>Dev dependencies</h3>\n<p>Here are our initial development dependencies:</p>\n<ul>\n<li><a href=\"https://necolas.github.io/normalize.css/\">normalize.css</a>: so that all elements render consistently</li>\n<li><a href=\"https://github.com/postcss/postcss\">PostCSS</a>'s CLI: to leverage its ecosystem of feature plugins</li>\n<li><a href=\"http://cssnext.io/\">CSSnext</a>: a PostCSS plugin that helps you to use the latest CSS syntax today. This way the code will be a little more future-proof. Additionally, CSSnext also includes <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> as a dependency.</li>\n<li><code>postcss-import</code>: used to pull in a css file that wasn't being preprocessed</li>\n<li><code>cssnano</code>: minify and optimize output</li>\n</ul>\n<p>Install using yarn (or the npm equivalent)</p>\n<pre><code>yarn add -D normalize.css postcss-cli postcss-cssnext postcss-import cssnano\n</code></pre>\n<h3 id=\"postcss-config\"><a href=\"#postcss-config\" class=\"phenomic-HeadingAnchor\">#</a>PostCSS config</h3>\n<p>Create a json file that contains the config for PostCSS. The docs named it <strong>options.json</strong> but I choose <strong>postcss.json</strong> for better clarity. The comments below explain some keys.</p>\n<pre><code>{\n    // Enable plugins in order\n    \"use\": [ \n        \"postcss-import\",\n        \"postcss-cssnext\",\n        \"cssnano\"\n    ],\n    \"input\": \"main.css\",\n    \"output\": \"dist/main.css\",\n    // use locally installed plugins (eg. in node_modules)\n    \"local-plugins\": true,\n    // Enable sourcemaps\n    \"map\": true,\n    // CSSnext and cssnano both use autoprefixer, but for different features/purposes\n    // see https://github.com/MoOx/postcss-cssnext/issues/323\n    \"postcss-cssnext\": {\n        \"warnForDuplicates\": false\n    }\n}\n</code></pre>\n<h3 id=\"css-time\"><a href=\"#css-time\" class=\"phenomic-HeadingAnchor\">#</a>CSS time</h3>\n<p>Go ahead and create <strong>main.css</strong> at the project root. The above config will output to <strong>dist/</strong>. Here's a quick sample.</p>\n<pre><code>@import('normalize.css');\n\n:root {\n    --color-primary: blue;\n    --color-secondary: red;\n}\n</code></pre>\n<h3 id=\"building\"><a href=\"#building\" class=\"phenomic-HeadingAnchor\">#</a>Building</h3>\n<p>Use the postcss-cli with the config file passed in as an arg and save it as an npm script. </p>\n<pre><code>\"scripts\": {\n    \"build\": \"node_modules/postcss-cli/bin/postcss -c postcss.json\"\n}\n</code></pre>\n<p>Now you can simply run <code>yarn run build</code> and your css will be processed and output to <strong>dist</strong>. But we can still do better. </p>\n<h3 id=\"watch-for-changes\"><a href=\"#watch-for-changes\" class=\"phenomic-HeadingAnchor\">#</a>Watch for changes</h3>\n<p>Enabling watch will auto-transform the css file on changes. Add another npm script, which is exactly the same as <code>build</code> but with the watch flag.</p>\n<pre><code>\"build:dev\": \"node_modules/postcss-cli/bin/postcss -c postcss.json -w\"\n</code></pre>\n<h3 id=\"livereload\"><a href=\"#livereload\" class=\"phenomic-HeadingAnchor\">#</a>Livereload</h3>\n<p>You wouldn't develop a CSS framework without seeing it rendered on a page so let's create one that we can use for development. In <strong>dist/</strong> create an <strong>index.html</strong> file and populate it with some HTML, and add a link to your <strong>main.css</strong> file.</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html lang=\"en-US\">\n    &#x3C;head>\n        &#x3C;link rel=\"stylesheet\" href=\"/main.css\">\n    &#x3C;/head>\n    &#x3C;body>\n        &#x3C;main>Hello world&#x3C;/main>\n    &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<blockquote>\n<p><strong>dist/</strong> probably isn't the best place for this file and I may change that in the future. We'll leave it here for now.</p>\n</blockquote>\n<p><a href=\"https://www.npmjs.com/package/lr-http-server\"><code>lr-http-server</code></a> will reload on changes, as well as a functioning http server. </p>\n<pre><code>yarn add -D lr-http-server \n</code></pre>\n<p>And then register a new npm script for it</p>\n<pre><code>\"reload\": \"lr-http-server -p 3000 -d './dist/'\"\n</code></pre>\n<h3 id=\"composing-scripts\"><a href=\"#composing-scripts\" class=\"phenomic-HeadingAnchor\">#</a>Composing scripts</h3>\n<p>We want the two above scripts to run in parallel so that if either the css or the html file changes the livereload server will do its job. <a href=\"https://www.npmjs.com/package/npm-run-all\"><code>npm-run-all</code></a> with the <code>-p</code> (parallel) flag does this exactly.</p>\n<pre><code>yarn add -D npm-run-all \n</code></pre>\n<p>Join the two tasks together into a single npm script</p>\n<pre><code>\"start\": \"npm-run-all -p build:dev reload\" \n</code></pre>\n<p>And then run easily with </p>\n<pre><code>yarn start\n</code></pre>\n<h3 id=\"fin\"><a href=\"#fin\" class=\"phenomic-HeadingAnchor\">#</a>Fin</h3>\n<p>This basic setup offers:</p>\n<ul>\n<li>Autoprefixing to support the 2 latest browsers</li>\n<li>Future CSS syntax usable today</li>\n<li>minification</li>\n<li>optimizations</li>\n<li>a quick and easy development setup to reflect changes on-the-fly</li>\n</ul>\n<p>Use <code>yarn start</code> to develop, and <code>yarn run build</code> to output the final CSS file, ready to use. Improve upon this as needed! </p>\n","__filename":"posts/build-a-css-framework-using-npm.md","__url":"/posts/build-a-css-framework-using-npm/","__resourceUrl":"/posts/build-a-css-framework-using-npm/index.html","__dataUrl":"/posts/build-a-css-framework-using-npm/index.html.95663b4611b6c17b3de1b7f1c4eeb364.json"}