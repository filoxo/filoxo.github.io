{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(\"a\", {\n      className: \"gatsby-resp-image-link\",\n      href: \"/static/add274474afb2aa4bd26d33be9de68c4/78abb/leaves.jpg\",\n      style: {\n        \"display\": \"block\"\n      },\n      target: \"_blank\",\n      rel: \"noopener\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"maxWidth\": \"590px\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"25%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Leaves\",\n      title: \"\",\n      src: \"/static/add274474afb2aa4bd26d33be9de68c4/a6d7d/leaves.jpg\",\n      srcSet: \"/static/add274474afb2aa4bd26d33be9de68c4/51d5b/leaves.jpg 148w,\\n/static/add274474afb2aa4bd26d33be9de68c4/9118c/leaves.jpg 295w,\\n/static/add274474afb2aa4bd26d33be9de68c4/a6d7d/leaves.jpg 590w,\\n/static/add274474afb2aa4bd26d33be9de68c4/ea746/leaves.jpg 885w,\\n/static/add274474afb2aa4bd26d33be9de68c4/9b641/leaves.jpg 1180w,\\n/static/add274474afb2aa4bd26d33be9de68c4/78abb/leaves.jpg 1200w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/filoxo/simple-style\"\n      }\n    }, `Simple Style`), ` (which is still a WIP as requirements come up). Surprisingly, using `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.5w4loc8uy\"\n      }\n    }, `npm as a build tool`), ` made it extremely easy to set up a dev environment. I'll review everything about the setup in this post for my own documentation, but hopefully can also serve as a clean, straightforward example.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I used `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://yarnpkg.com/en/\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"a\"\n    }, `yarn`)), ` for this experiment instead of `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `npm`), ` solely for the speed improvements. Fortunately, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn`), `'s commands all have their `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `npm`), ` equivalents so don't get hung up on the differences.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This basic setup offers:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Autoprefixing to support the 2 latest browsers`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Future CSS syntax usable today`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `minification`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `optimizations`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `a quick and easy development setup to reflect changes on-the-fly`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Dev dependencies`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Here are our initial development dependencies:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://necolas.github.io/normalize.css/\"\n      }\n    }, `normalize.css`), `: so that all elements render consistently`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/postcss/postcss\"\n      }\n    }, `PostCSS`), `'s CLI: to leverage its ecosystem of feature plugins`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"http://cssnext.io/\"\n      }\n    }, `CSSnext`), `: a PostCSS plugin that helps you to use the latest CSS syntax today. This way the code will be a little more future-proof. Additionally, CSSnext also includes `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/postcss/autoprefixer\"\n      }\n    }, `Autoprefixer`), ` as a dependency.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `postcss-import`), `: used to pull in a css file that wasn't being preprocessed`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `cssnano`), `: minify and optimize output`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Install using yarn (or the npm equivalent)`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `yarn add -D normalize.css postcss-cli postcss-cssnext postcss-import cssnano\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `PostCSS config`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Create a json file that contains the config for PostCSS. The docs named it `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `options.json`), ` but I choose `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `postcss.json`), ` for better clarity. The comments below explain some keys.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `{\n    // Enable plugins in order\n    \"use\": [\n        \"postcss-import\",\n        \"postcss-cssnext\",\n        \"cssnano\"\n    ],\n    \"input\": \"main.css\",\n    \"output\": \"dist/main.css\",\n    // use locally installed plugins (eg. in node_modules)\n    \"local-plugins\": true,\n    // Enable sourcemaps\n    \"map\": true,\n    // CSSnext and cssnano both use autoprefixer, but for different features/purposes\n    // see https://github.com/MoOx/postcss-cssnext/issues/323\n    \"postcss-cssnext\": {\n        \"warnForDuplicates\": false\n    }\n}\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `CSS time`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Go ahead and create `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `main.css`), ` at the project root. The above config will output to `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dist/`), `. Here's a quick sample to put into the file for now.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `@import('normalize.css');\n\n:root {\n    --color-primary: blue;\n    --color-secondary: red;\n}\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Building`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use the postcss-cli with the config file passed in as an arg and save it as an npm script.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"scripts\": {\n    \"build\": \"node_modules/postcss-cli/bin/postcss -c postcss.json\"\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Now you can simply run `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `yarn run build`), ` and your css will be processed and output to `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `dist`), `. But we can still do better.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Watch for changes`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Enabling watch will auto-transform the css file on changes. Add another npm script, which is exactly the same as `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `build`), ` but with the watch flag.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"build:dev\": \"node_modules/postcss-cli/bin/postcss -c postcss.json -w\"\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Livereload`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You wouldn't develop a CSS framework without seeing it rendered on a page so let's create a test page for development. Create `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `index.html`), ` at the project root and populate it with some HTML, and add a link to your `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `main.css`), ` file.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `<!doctype html>\n<html lang=\"en-US\">\n    <head>\n        <link rel=\"stylesheet\" href=\"/dist/main.css\">\n    </head>\n    <body>\n        <main>Hello world</main>\n    </body>\n</html>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/lr-http-server\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"a\"\n    }, `lr-http-server`)), ` will reload on changes, as well as a functioning http server.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `yarn add -D lr-http-server\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `And then register a new npm script for it`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"reload\": \"lr-http-server -p 3000\"\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Composing scripts`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We want the two above scripts to run in parallel so that if either the css or the html file changes the livereload server will do its job. `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/npm-run-all\"\n      }\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"a\"\n    }, `npm-run-all`)), ` with the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `-p`), ` (parallel) flag does this exactly.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `yarn add -D npm-run-all\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Join the two tasks together into a single npm script`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"start\": \"npm-run-all -p build:dev reload\"\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `And then run easily with`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `yarn start\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Done!`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You're ready to keep going developing your styles inside `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `main.css`), `. Feel free to improve upon this as needed!`));\n  }\n\n}"},"frontmatter":{"title":"Building a CSS framework using npm","date":"Feb 14, 2017","tags":["javascript","npm"]}}},"pageContext":{"slug":"/2017-02-14-build-a-css-framework-using-npm/"}}