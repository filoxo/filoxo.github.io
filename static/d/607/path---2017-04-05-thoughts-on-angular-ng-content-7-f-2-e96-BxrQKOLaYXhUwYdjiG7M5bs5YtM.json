{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(\"a\", {\n      className: \"gatsby-resp-image-link\",\n      href: \"/static/dc2c93139ddaf804036841d8b81506a3/1224d/bldg-angle.jpg\",\n      style: {\n        \"display\": \"block\"\n      },\n      target: \"_blank\",\n      rel: \"noopener\"\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-wrapper\",\n      style: {\n        \"position\": \"relative\",\n        \"display\": \"block\",\n        \"marginLeft\": \"auto\",\n        \"marginRight\": \"auto\",\n        \"maxWidth\": \"590px\"\n      }\n    }, React.createElement(\"span\", {\n      className: \"gatsby-resp-image-background-image\",\n      style: {\n        \"paddingBottom\": \"33.33333333333333%\",\n        \"position\": \"relative\",\n        \"bottom\": \"0px\",\n        \"left\": \"0px\",\n        \"backgroundSize\": \"cover\",\n        \"display\": \"block\"\n      }\n    }), React.createElement(\"img\", {\n      className: \"gatsby-resp-image-image\",\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"margin\": \"0px\",\n        \"verticalAlign\": \"middle\",\n        \"position\": \"absolute\",\n        \"top\": \"0px\",\n        \"left\": \"0px\",\n        \"boxShadow\": \"inset 0px 0px 0px 400px white\"\n      },\n      alt: \"Image of building angles\",\n      title: \"\",\n      src: \"/static/dc2c93139ddaf804036841d8b81506a3/acfdd/bldg-angle.jpg\",\n      srcSet: \"/static/dc2c93139ddaf804036841d8b81506a3/ecc8a/bldg-angle.jpg 148w,\\n/static/dc2c93139ddaf804036841d8b81506a3/92e29/bldg-angle.jpg 295w,\\n/static/dc2c93139ddaf804036841d8b81506a3/acfdd/bldg-angle.jpg 590w,\\n/static/dc2c93139ddaf804036841d8b81506a3/a4bb9/bldg-angle.jpg 885w,\\n/static/dc2c93139ddaf804036841d8b81506a3/d7339/bldg-angle.jpg 1180w,\\n/static/dc2c93139ddaf804036841d8b81506a3/1224d/bldg-angle.jpg 1200w\",\n      sizes: \"(max-width: 590px) 100vw, 590px\"\n    })))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I recently came across some interesting behavior with Angular's `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ng-content`), ` that I wanted to jot down so I can search for some answers. NgContent isn't well documented.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Why isn't `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"h3\"\n    }, `ng-content`), ` self-closing?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ng-content`), ` is to be used like any other element. This is great, especially for rendering in default content. For example, a component that can transclude some content but if for some reason nothing is nested into it, it will show a default state.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `<profile-card>\n    <ng-content>\n        <img src=\"/defaultProfile.jpg\"/>\n        <p>Unknown</p>\n    </ng-content>\n</profile-card>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `But what if you don't need anything within the opening and closing tags? You'd think that just `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `<ng-content />`), ` would be a nice and simple way to signal where to place the included content, but attempting to do so generates the following error:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `Template parse errors: Only void and foreign elements can be self closed \"ng-content\"\n[ERROR ->]<ng-content />\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Seems weird to me. This may be by design.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Select is only able to find immediate children?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `One of the features of `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `ng-content`), ` is that you can use the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `select`), ` attribute on it to pull transcluded content into a specific location.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `<!-- my-component.html -->\n<div>\n    <ng-content select=\".title\"></ng-content>\n    <ng-content select=\".subtitle\"></ng-content>\n</div>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is great for enforcing layout in a specific way. Except... it has a `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `major`), ` caveat, at least in my opinion. This select only seems to match `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `immediate children only`), `, nothing else.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So using the above `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `my-component`), `, this belwo works while placing the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `title`), ` above the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `subtitle`), `:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `<my-component>\n    <p class=\"subtitle\">world</p>\n    <h2 class=\"title\">Hello</h2>\n</my-component>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `but then this doesn't! Nothing is rendered.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `<my-component>\n    <div>\n        <h2 class=\"title\">Hello</h2>\n        <p class=\"subtitle\">world</p>\n    </div>\n</my-component>\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `It can't find these same elements because they're wrapped in an extra div? I would have thought that it would match those elements as well, just like `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `querySelector`), ` or CSS selectors would. If I only wanted immediate children I would have used something like `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `select=\"> .title\"`), `. My assumption that it used standard selectors is wrong? ü§∑‚Äç‚ôÇÔ∏è That sucks.`));\n  }\n\n}"},"frontmatter":{"title":"Thoughts on Angular: Ng-Content","date":"Apr 05, 2017","tags":["angular"]}}},"pageContext":{"slug":"/2017-04-05-thoughts-on-angular-ng-content/"}}