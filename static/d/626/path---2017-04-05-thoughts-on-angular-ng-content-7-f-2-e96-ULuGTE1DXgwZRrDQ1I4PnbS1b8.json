{"data":{"markdownRemark":{"html":"<p><img src=\"./bldg-angle.jpg\" alt=\"&#x22;Image of building angles&#x22;\"></p>\n<p>I recently came across some interesting behavior with Angular's <code>ng-content</code> that I wanted to jot down so I can search for some answers. NgContent isn't well documented.</p>\n<h3>Why isn't <code>ng-content</code> self-closing?</h3>\n<p><code>ng-content</code> is to be used like any other element. This is great, especially for rendering in default content. For example, a component that can transclude some content but if for some reason nothing is nested into it, it will show a default state.</p>\n<pre><code>&#x3C;profile-card>\n    &#x3C;ng-content>\n        &#x3C;img src=\"/defaultProfile.jpg\"/>\n        &#x3C;p>Unknown&#x3C;/p>\n    &#x3C;/ng-content>\n&#x3C;/profile-card>\n</code></pre>\n<p>But what if you don't need anything within the opening and closing tags? You'd think that just <code>&#x3C;ng-content /></code> would be a nice and simple way to signal where to place the included content, but attempting to do so generates the following error:</p>\n<pre><code>Template parse errors: Only void and foreign elements can be self closed \"ng-content\"\n[ERROR ->]&#x3C;ng-content />\n</code></pre>\n<p>Seems weird to me. This may be by design.</p>\n<h3>Select is only able to find immediate children?</h3>\n<p>One of the features of <code>ng-content</code> is that you can use the <code>select</code> attribute on it to pull transcluded content into a specific location.</p>\n<pre><code>&#x3C;!-- my-component.html -->\n&#x3C;div>\n    &#x3C;ng-content select=\".title\">&#x3C;/ng-content>\n    &#x3C;ng-content select=\".subtitle\">&#x3C;/ng-content>\n&#x3C;/div>\n</code></pre>\n<p>This is great for enforcing layout in a specific way. Except... it has a <strong>major</strong> caveat, at least in my opinion. This select only seems to match <em>immediate children only</em>, nothing else.</p>\n<p>So using the above <code>my-component</code>, this belwo works while placing the <code>title</code> above the <code>subtitle</code>:</p>\n<pre><code>&#x3C;my-component>\n    &#x3C;p class=\"subtitle\">world&#x3C;/p>\n    &#x3C;h2 class=\"title\">Hello&#x3C;/h2>\n&#x3C;/my-component>\n</code></pre>\n<p>but then this doesn't! Nothing is rendered.</p>\n<pre><code>&#x3C;my-component>\n    &#x3C;div>\n        &#x3C;h2 class=\"title\">Hello&#x3C;/h2>\n        &#x3C;p class=\"subtitle\">world&#x3C;/p>\n    &#x3C;/div>\n&#x3C;/my-component>\n</code></pre>\n<p>It can't find these same elements  because they're wrapped in an extra div? I would have thought that it would match those elements as well, just like <code>querySelector</code> or CSS selectors would. If I only wanted immediate children I would have used something like <code>select=\"> .title\"</code>. My assumption that it used standard selectors is wrong? ¯\\<em>(ツ)</em>/¯ That sucks.</p>","frontmatter":{"title":"Thoughts on Angular: Ng-Content"}}},"pageContext":{"slug":"/2017-04-05-thoughts-on-angular-ng-content/"}}