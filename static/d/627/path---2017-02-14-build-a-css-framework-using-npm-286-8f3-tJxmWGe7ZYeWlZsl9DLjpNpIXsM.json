{"data":{"mdx":{"html":"<div><p><a class=\"gatsby-resp-image-link\" href=\"/static/add274474afb2aa4bd26d33be9de68c4/78abb/leaves.jpg\" style=\"display:block\" target=\"_blank\" rel=\"noopener\"><span class=\"gatsby-resp-image-wrapper\" style=\"position:relative;display:block;max-width:590px;margin-left:auto;margin-right:auto\"><span class=\"gatsby-resp-image-background-image\" style=\"padding-bottom:25%;position:relative;bottom:0px;left:0px;background-size:cover;display:block\"></span><img class=\"gatsby-resp-image-image\" style=\"width:100%;height:100%;margin:0px;vertical-align:middle;position:absolute;top:0px;left:0px;box-shadow:inset 0px 0px 0px 400px white\" alt=\"Leaves\" title=\"\" src=\"/static/add274474afb2aa4bd26d33be9de68c4/a6d7d/leaves.jpg\" srcSet=\"/static/add274474afb2aa4bd26d33be9de68c4/51d5b/leaves.jpg 148w,\n/static/add274474afb2aa4bd26d33be9de68c4/9118c/leaves.jpg 295w,\n/static/add274474afb2aa4bd26d33be9de68c4/a6d7d/leaves.jpg 590w,\n/static/add274474afb2aa4bd26d33be9de68c4/ea746/leaves.jpg 885w,\n/static/add274474afb2aa4bd26d33be9de68c4/9b641/leaves.jpg 1180w,\n/static/add274474afb2aa4bd26d33be9de68c4/78abb/leaves.jpg 1200w\" sizes=\"(max-width: 590px) 100vw, 590px\"/></span></a></p><p>This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is <a href=\"https://github.com/filoxo/simple-style\">Simple Style</a> (which is still a WIP as requirements come up). Surprisingly, using <a href=\"https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.5w4loc8uy\">npm as a build tool</a> made it extremely easy to set up a dev environment. I&#x27;ll review everything about the setup in this post for my own documentation, but hopefully can also serve as a clean, straightforward example.</p><p>I used <a href=\"https://yarnpkg.com/en/\"><code>yarn</code></a> for this experiment instead of <code>npm</code> solely for the speed improvements. Fortunately, <code>yarn</code>&#x27;s commands all have their <code>npm</code> equivalents so don&#x27;t get hung up on the differences.</p><p>This basic setup offers:</p><ul><li>Autoprefixing to support the 2 latest browsers</li><li>Future CSS syntax usable today</li><li>minification</li><li>optimizations</li><li>a quick and easy development setup to reflect changes on-the-fly</li></ul><h3>Dev dependencies</h3><p>Here are our initial development dependencies:</p><ul><li><a href=\"https://necolas.github.io/normalize.css/\">normalize.css</a>: so that all elements render consistently</li><li><a href=\"https://github.com/postcss/postcss\">PostCSS</a>&#x27;s CLI: to leverage its ecosystem of feature plugins</li><li><a href=\"http://cssnext.io/\">CSSnext</a>: a PostCSS plugin that helps you to use the latest CSS syntax today. This way the code will be a little more future-proof. Additionally, CSSnext also includes <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> as a dependency.</li><li><code>postcss-import</code>: used to pull in a css file that wasn&#x27;t being preprocessed</li><li><code>cssnano</code>: minify and optimize output</li></ul><p>Install using yarn (or the npm equivalent)</p><pre><code>yarn add -D normalize.css postcss-cli postcss-cssnext postcss-import cssnano\n</code></pre><h3>PostCSS config</h3><p>Create a json file that contains the config for PostCSS. The docs named it <strong>options.json</strong> but I choose <strong>postcss.json</strong> for better clarity. The comments below explain some keys.</p><pre><code>{\n    // Enable plugins in order\n    &quot;use&quot;: [\n        &quot;postcss-import&quot;,\n        &quot;postcss-cssnext&quot;,\n        &quot;cssnano&quot;\n    ],\n    &quot;input&quot;: &quot;main.css&quot;,\n    &quot;output&quot;: &quot;dist/main.css&quot;,\n    // use locally installed plugins (eg. in node_modules)\n    &quot;local-plugins&quot;: true,\n    // Enable sourcemaps\n    &quot;map&quot;: true,\n    // CSSnext and cssnano both use autoprefixer, but for different features/purposes\n    // see https://github.com/MoOx/postcss-cssnext/issues/323\n    &quot;postcss-cssnext&quot;: {\n        &quot;warnForDuplicates&quot;: false\n    }\n}\n</code></pre><h3>CSS time</h3><p>Go ahead and create <strong>main.css</strong> at the project root. The above config will output to <strong>dist/</strong>. Here&#x27;s a quick sample to put into the file for now.</p><pre><code>@import(&#x27;normalize.css&#x27;);\n\n:root {\n    --color-primary: blue;\n    --color-secondary: red;\n}\n</code></pre><h3>Building</h3><p>Use the postcss-cli with the config file passed in as an arg and save it as an npm script.</p><pre><code>&quot;scripts&quot;: {\n    &quot;build&quot;: &quot;node_modules/postcss-cli/bin/postcss -c postcss.json&quot;\n}\n</code></pre><p>Now you can simply run <code>yarn run build</code> and your css will be processed and output to <strong>dist</strong>. But we can still do better.</p><h3>Watch for changes</h3><p>Enabling watch will auto-transform the css file on changes. Add another npm script, which is exactly the same as <code>build</code> but with the watch flag.</p><pre><code>&quot;build:dev&quot;: &quot;node_modules/postcss-cli/bin/postcss -c postcss.json -w&quot;\n</code></pre><h3>Livereload</h3><p>You wouldn&#x27;t develop a CSS framework without seeing it rendered on a page so let&#x27;s create a test page for development. Create <strong>index.html</strong> at the project root and populate it with some HTML, and add a link to your <strong>main.css</strong> file.</p><pre><code>&lt;!doctype html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n    &lt;head&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/main.css&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;main&gt;Hello world&lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p><a href=\"https://www.npmjs.com/package/lr-http-server\"><code>lr-http-server</code></a> will reload on changes, as well as a functioning http server.</p><pre><code>yarn add -D lr-http-server\n</code></pre><p>And then register a new npm script for it</p><pre><code>&quot;reload&quot;: &quot;lr-http-server -p 3000&quot;\n</code></pre><h3>Composing scripts</h3><p>We want the two above scripts to run in parallel so that if either the css or the html file changes the livereload server will do its job. <a href=\"https://www.npmjs.com/package/npm-run-all\"><code>npm-run-all</code></a> with the <code>-p</code> (parallel) flag does this exactly.</p><pre><code>yarn add -D npm-run-all\n</code></pre><p>Join the two tasks together into a single npm script</p><pre><code>&quot;start&quot;: &quot;npm-run-all -p build:dev reload&quot;\n</code></pre><p>And then run easily with</p><pre><code>yarn start\n</code></pre><h3>Done!</h3><p>You&#x27;re ready to keep going developing your styles inside <strong>main.css</strong>. Feel free to improve upon this as needed!</p></div>","frontmatter":{"title":"Building a CSS framework using npm","date":"Feb 14, 2017","tags":["javascript","npm"]}}},"pageContext":{"slug":"/2017-02-14-build-a-css-framework-using-npm/"}}