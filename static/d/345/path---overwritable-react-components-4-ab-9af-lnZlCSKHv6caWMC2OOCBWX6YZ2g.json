{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Reading Dan Abramov's `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://overreacted.io/writing-resilient-components/\"\n      }\n    }, `\"Writing Resilient Components\"`), `, I found \"Donâ€™t Stop the Data Flow\" to be great principle to follow. As I was thinking about putting this in practice, I came across another situation in which data flow was stopped, unintentionally. I thought it was interesting how just a minor oversight causes so much issue. Let me tell you about it. `), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I was using my company's shared components library. Let me recreate this component for illustration.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-jsx\"\n      }\n    }, `import React from 'react'\nimport styled from 'styled-components'\n\nconst NavItem = styled.div.attrs({\n  tabIndex: '0',\n  role: 'button'\n})\\`\n...\n\\`\n\ndefault class NavItem {\n  render() {\n    const { children, onClick } = this.props\n    return (\n      <NavItem onClick={onClick}>{children}</NavItem>\n    )\n  }\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Can you spot the issues? There's two that'll talk about.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Accessibility`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The original author had some idea of what is needed to make this item accessible, but it wasn't implemented thoroughly. The above item is tabbable by a keyboard but `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `does not respond to keyboard clicks`), ` (`, React.createElement(\"kbd\", null, `Enter`), ` or `, React.createElement(\"kbd\", null, `Space`), `).`));\n  }\n\n}"},"frontmatter":{"title":"Overwritable React components","date":"Mar 23, 2019","tags":["react","javascript"]}}},"pageContext":{"slug":"/overwritable-react-components/"}}