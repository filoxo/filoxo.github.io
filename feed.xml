<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[filoblog]]></title><description><![CDATA[filoblog]]></description><link>https://filoxo.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 31 May 2017 22:36:41 GMT</lastBuildDate><atom:link href="https://filoxo.github.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Practical thoughts on React and Angular]]></title><description><![CDATA[<p>I sometimes see developers ask "Should I use React, or Angular, or Vue.js, or <em>[insert new framework here]</em>?" and every time, I see fanatics immediately jump to recommending one without any real justification. Now, I'm no expert but I do have experience with both Angular and React. This post lists some of the differences between the actual usage of Angular (2+) and React. I hope to just shed some light on the practical differences between them to help you understand the decision a bit better.</p>
<h3 id="complexity"><a href="#complexity" class="phenomic-HeadingAnchor">#</a>Complexity</h3>
<p>Frameworks are abstractions to help reduce the complexity of building an application. Frameworks in turn introduce their own complexity. First, let's establish that each framework falls somewhere on a complexity spectrum.<a href="#vuejsTalk">¹</a></p>
<p><img src="/assets/framework-spectrum.jpg" alt="Framework Complexity Spectrum"></p>
<p>This is the first problem: <strong>React and Angular are at different points of the complexity spectrum</strong>. They're solving problems in different ways, and will never be equal to each other in scope. Using another analogy, they're different tools for different and various jobs; some of those jobs overlap, others don't.</p>
<p>For the most part, choosing between them based on this alone is <strong>moot</strong>. Why? Because React is "unopinionated" so you bring your own solution to solve problem X. Inversely, Angular provides many tools together into one framework. It is not an apples-to-apples comparison.</p>
<h4 id="complexity-react"><a href="#complexity-react" class="phenomic-HeadingAnchor">#</a>Complexity: React</h4>
<p>Let's start with React here. React is not a complete framework, you are required to bring in dependencies on your own. This is can be great but also daunting. Not all developers who work on the web know about the very latest libs, are proficient with <code>npm</code> or <code>yarn</code>, or can set up an ES6 project to transpile down to ES5.</p>
<p>In an enterprise setting, choosing a library might need more consideration than "just because". Does the lib's license allow enterprise use? What if an engineering manager needs to know the difference between various libs? Which library contains enough features to support future projects/requirements?</p>
<p>A personal experience of this I had is choosing an HTTP library. There are so many great choices! Some of the ones I've looked at to use with React are:</p>
<ul>
<li><a href="https://github.com/mzabriskie/axios">Axios</a></li>
<li><a href="https://github.com/visionmedia/superagent">Superagent</a></li>
<li><a href="https://github.com/petkaantonov/bluebird">Bluebird</a></li>
<li><a href="https://github.com/github/fetch">Fetch</a></li>
<li><a href="https://github.com/developit/unfetch">Unfetch</a></li>
</ul>
<p>The company I work for is slowly coming around to adopting React but what's there to stop each team from choosing a different lib from of the above? Allowing this sort of fragmentation makes it that much harder to share code and contribute to other teams. Furthermore, making a decision to standardize one requires intimate knowledge of the features, benefits, and disadvantages of each.</p>
<p>Now, <em>this evaluation process isn't bad</em>! It would GREAT to make a thorough and informed decision but not every developer or team is equipped to make this kind of analysis for every dependency. If this isn't something that you or your team can or want to do, then consider a full framework like Angular. Conversely, if developers are passionate about jumping in and learning each lib quickly then this isn't a problem.</p>
<h4 id="complexity-angular"><a href="#complexity-angular" class="phenomic-HeadingAnchor">#</a>Complexity: Angular</h4>
<p>With Angular you're getting many of libraries together from a single source, compatible and tested. Angular is an abstraction built on top of a component model, TypeScript, RxJS, Webpack, to name a few. The advantages I see here are:</p>
<ul>
    <li>Documentation exists showing how to use each lib within context of the framework</li>
    <li>Each standard lib will be compatible and integrates better than external libs might</li>
    <li>a solution is already "chosen" for you by the time you encounter a problem to be solved</li>
    <li>Angular's implementation of semver means that most updates will follow a compatible rhythm</li>
</ul>
<p>There are some disadvantages:</p>
<ul>
    <li>You're getting a whole lot of framework to have to learn together, the learning curve here can be steep and overwhelming</li>
    <li>Angular's documentation is not the very best</li>
    <li>there's no sensibility in trying to replace one part of the framework for another lib</li>
    <li>Full-frameworks can add in a lot of code that you don't use<sup>*</sup></li>
    <li>Re-using the Angular namespace means that there's a lot of conflation between AngularJS (version 1) and Angular (2+)</li>
</ul>
<p><sup>*</sup>Both frameworks, if configured properly, discards unused dependencies from a production build (a process known as tree-shaking).</p>
<h3 id="framework"><a href="#framework" class="phenomic-HeadingAnchor">#</a>Framework</h3>
<p>React's model of a single component drives to you really want to keep your components tiny, and import the rest. On average, my React components stay at less than 50 lines. Keeping components tiny really helps with composability.
Angular uses a similar component model, but requires at least 10+ lines just to declare, along 2 accompanying files—a template file and a style file. Keeping the template separate has had an unforeseen consequence: templates get <em>huge</em> and end up more bloated than needed. Because of this, I feel like there's a desire to add more logic to the class than a single component actually needs. Its all to easy to bloat a single component instead of breaking it out into smaller pieces.</p>
<h3 id="tools"><a href="#tools" class="phenomic-HeadingAnchor">#</a>Tools</h3>
<p>React has <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>, a very small commandline tool to generate a React project. It's purposefully pretty bare bones and new features are only added with much consideration and discussion. In my subjective experience, I've found that a sizable number of people chose to eject so that they have more control over their build config. This usually happens when they seek to include a feature/build step that CRA can't/won't include.</p>
<p>Angular has the <a href="https://github.com/angular/angular-cli">angular-cli</a>, a very functional commandline tool that pulls together a great number of useful features:</p>
<ul>
<li>Generator (like Yeoman)</li>
<li>Dev server with live reload (using webpack-dev-server)</li>
<li>Preconfigured css preprocessing (Sass, Less, or Stylus)</li>
<li>Preconfigured linting (tslint)</li>
<li>Preconfigured testing (Karma)</li>
<li>Build configuration for dev &#x26; production</li>
</ul>
<p>The Angular CLI has become much more robust and helps many devs quickly achieve things that might take much more manual configuration and experience. I've very much enjoyed using the Angular CLI. The biggest issue I've had with it are bad configurations: retroactive upgrades, version mismatches, or borked upgrades.</p>
<h4 id="ecosystem-react"><a href="#ecosystem-react" class="phenomic-HeadingAnchor">#</a>Ecosystem: React</h4>
<p>React, backed by Facebook, has been favored by many developers and companies, like Microsoft and Samsung. React is the <strong>#1</strong> most-loved and 3rd most wanted framework<a href="#StackOverflowDeveloperSurvey2017">²</a> according to StackOverflow's 2017 Developer Survey. There are tons of React-based projects (this blog uses <a href="https://phenomic.io/">Phenomic</a>! 🤘 ) as well as React components. React's single-responsibility model has led to development of other great community-driven libraries that can enhance your app's functionality. Projects like <a href="https://github.com/ReactTraining/react-router">React Router</a>, <a href="http://redux.js.org/">Redux</a>/<a href="https://github.com/mobxjs/mobx">MobX</a>, and React Native have all sprouted and thrived under <a href="https://twitter.com/ryanflorence/status/869732167814848512">the big React tent</a>.</p>
<p>Even more interesting, <a href="https://preactjs.com/">Preact</a> and <a href="https://infernojs.org/">Inferno</a> are <em>"almost drop-in"</em> alternatives that have same/similar API; I find that many developers using React have literally never heard of either 🤔 yet these can offer even better performance for many apps.</p>
<p>React's ecosystem is as prolyfic as one could hope for.</p>
<h4 id="ecosystem-angular"><a href="#ecosystem-angular" class="phenomic-HeadingAnchor">#</a>Ecosystem: Angular</h4>
<p>Angular on the other hand feels very much like "corporate" or enterprise softare. The API very much feels like <em>This is how we solved this problem, and you get to use it that way</em>. Regardless, adoption of Angular 2 has not lagged behind at all.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">1.3 million people use Angular 1.<br>480k already use Angular 2.</p>&mdash; David East (@_davideast) <a href="https://twitter.com/_davideast/status/776244105261133824">September 15, 2016</a></blockquote>
<script defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And this quote is somewhat old; these numbers have most likely increased. Angular ranks very high as a popular framework: 6th most loved, 4th most dreaded, and 2nd most wanted<a href="#StackOverflowDeveloperSurvey2017">²</a> <a href="#footnote2">³</a></sup>.</p>
<p>The Angular ecosystem is not quite as expansive, but has Google's weight behind the rest of their products to push out additional libraries that align with Angular. What that means is companion projects like <a href="https://github.com/angular/material2">Angular Material</a>, <a href="https://github.com/angular/angularfire2">AngularFire2</a>, and <a href="https://github.com/angular/universal">Angular Universal</a> are kept up to date with the Angular core. Aside from these projects there aren't as many thriving projects built for Angular as I'd like to see. Many of these have gotten out of date very fast.</p>
<p>TypeScript has seen some great progress and adoption in the JS community as a whole; its the 3rd most loved and 6th most wanted language of 2017<a href="#StackOverflowDeveloperSurvey2017">²</a>! Furthermore, a success with TypeScript that I've experienced is that it makes backend developers a more comfortable writing JavaScript. It enables bringing in some concepts that can help make a webapp more robust, in addition to being an ES6 transpiler. Learning TypeScript's features and syntax was not difficult.</p>
<p>The most difficult part of using TypeScript is finding the correct type definitions (typings) to go along with your dependent libs. Most are available via npm under the <code>@types</code> namespace but if that isn't the case, you lose the main benefit of TypeScript in the first place: type safety. At the same time, that's no reason not to use Angular! It would make the developer all that better by taking the initiative to contribute the types. Yay for open source software! But this is a challege that you may face with Angular.</p>
<h3 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h3>
<p>This long-winded explanation is really just to say: Don't choose between React and Angular just because you're a fan of one. <strong>Choose the one that fits your project's requirements; the one whose risks and challenges you're willing to accept; the one that is the sane investment considering the needs of the developer, team, and business.</strong> Ultimately, both frameworks are backed by major companies. Both have great developers that lead them, and communities surrounding them. Both solve complex problems and can be used to build great web apps.</p>
<p>If you can, don't lock yourself into one. Always keep learning about what else can solve the problem at hand. ✌️</p>
<hr>
<p><small>
Footnotes:</p>
<ul>
<li><a name="vuejsTalk" href="https://www.youtube.com/watch?v=pBBSp_iIiVM" target="_blank">1: "Vue.js: the Progressive Framework"</a></li>
<li><a name="StackOverflowDeveloperSurvey2017" href="https://insights.stackoverflow.com/survey/2017" target="_blank">2: StackOverflow Developer Survey 2017</a></li>
<li><a name="footnote2">3: </a> I don't think the survey properly distinguishes between AngularJS (version 1) and Angular (2+). It would be interesting to see the stats with these two versions divided.</li>
</ul>
<p></small></p>
]]></description><link>https://filoxo.github.io/posts/practical-thoughts-on-react-and-angular/</link><guid isPermaLink="true">https://filoxo.github.io/posts/practical-thoughts-on-react-and-angular/</guid><pubDate>Wed, 31 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Thoughts on Angular: Ng-Content]]></title><description><![CDATA[<p>I recently came across some interesting behavior with Angular's <code>ng-content</code> that I wanted to jot down so I can search for some answers. NgContent isn't well documented. </p>
<h3 id="why-isnt-ng-content-self-closing"><a href="#why-isnt-ng-content-self-closing" class="phenomic-HeadingAnchor">#</a>Why isn't <code>ng-content</code> self-closing?</h3>
<p><code>ng-content</code> is to be used like any other element. This is great, especially for rendering in default content. For example, a component that can transclude some content but if for some reason nothing is nested into it, it will show a default state.</p>
<pre><code>&#x3C;profile-card>
    &#x3C;ng-content>
        &#x3C;img src="/defaultProfile.jpg"/>
        &#x3C;p>Unknown&#x3C;/p>
    &#x3C;/ng-content>
&#x3C;/profile-card>
</code></pre>
<p>But what if you don't need anything within the opening and closing tags? You'd think that just <code>&#x3C;ng-content /></code> would be a nice and simple way to signal where to place the included content, but attempting to do so generates the following error:</p>
<pre><code>Template parse errors: Only void and foreign elements can be self closed "ng-content"
[ERROR ->]&#x3C;ng-content />
</code></pre>
<p>Seems weird to me. This may be by design. </p>
<h3 id="select-is-only-able-to-find-immediate-children"><a href="#select-is-only-able-to-find-immediate-children" class="phenomic-HeadingAnchor">#</a>Select is only able to find immediate children?</h3>
<p>One of the features of <code>ng-content</code> is that you can use the <code>select</code> attribute on it to pull transcluded content into a specific location. </p>
<pre><code>&#x3C;!-- my-component.html -->
&#x3C;div>
    &#x3C;ng-content select=".title">&#x3C;/ng-content>
    &#x3C;ng-content select=".subtitle">&#x3C;/ng-content>
&#x3C;/div>
</code></pre>
<p>This is great for enforcing layout in a specific way. Except... it has a <strong>major</strong> caveat, at least in my opinion. This select only seems to match <em>immediate children only</em>, nothing else.</p>
<p>So using the above <code>my-component</code>, this belwo works while placing the <code>title</code> above the <code>subtitle</code>:</p>
<pre><code>&#x3C;my-component>
    &#x3C;p class="subtitle">world&#x3C;/p>
    &#x3C;h2 class="title">Hello&#x3C;/h2>
&#x3C;/my-component>
</code></pre>
<p>but then this doesn't! Nothing is rendered. </p>
<pre><code>&#x3C;my-component>
    &#x3C;div>
        &#x3C;h2 class="title">Hello&#x3C;/h2>
        &#x3C;p class="subtitle">world&#x3C;/p>
    &#x3C;/div>
&#x3C;/my-component>
</code></pre>
<p>It can't find these same elements  because they're wrapped in an extra div? I would have thought that it would match those elements as well, just like <code>querySelector</code> or CSS selectors would. If I only wanted immediate children I would have used something like <code>select="> .title"</code>. My assumption that it used standard selectors is wrong? ¯\<em>(ツ)</em>/¯ That sucks.</p>
]]></description><link>https://filoxo.github.io/posts/thoughts-on-angular-ngcontent/</link><guid isPermaLink="true">https://filoxo.github.io/posts/thoughts-on-angular-ngcontent/</guid><pubDate>Wed, 05 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building a CSS framework using npm]]></title><description><![CDATA[<p>This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is <a href="https://github.com/filoxo/simple-style">Simple Style</a> (which is still a WIP as requirements come up). Surprisingly, using <a href="https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.5w4loc8uy">npm as a build tool</a> made it extremely easy to set up a dev environment. I'll review everything about the setup in this post for my own documentation, but hopefully can also serve as a clean, straightforward example.</p>
<p>I used <a href="https://yarnpkg.com/en/"><code>yarn</code></a> for this experiment instead of <code>npm</code> solely for the speed improvements. Fortunately, <code>yarn</code>'s commands all have their <code>npm</code> equivalents so don't get hung up on the differences.</p>
<p>This basic setup offers:</p>
<ul>
<li>Autoprefixing to support the 2 latest browsers</li>
<li>Future CSS syntax usable today</li>
<li>minification</li>
<li>optimizations</li>
<li>a quick and easy development setup to reflect changes on-the-fly</li>
</ul>
<h3 id="dev-dependencies"><a href="#dev-dependencies" class="phenomic-HeadingAnchor">#</a>Dev dependencies</h3>
<p>Here are our initial development dependencies:</p>
<ul>
<li><a href="https://necolas.github.io/normalize.css/">normalize.css</a>: so that all elements render consistently</li>
<li><a href="https://github.com/postcss/postcss">PostCSS</a>'s CLI: to leverage its ecosystem of feature plugins</li>
<li><a href="http://cssnext.io/">CSSnext</a>: a PostCSS plugin that helps you to use the latest CSS syntax today. This way the code will be a little more future-proof. Additionally, CSSnext also includes <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a> as a dependency.</li>
<li><code>postcss-import</code>: used to pull in a css file that wasn't being preprocessed</li>
<li><code>cssnano</code>: minify and optimize output</li>
</ul>
<p>Install using yarn (or the npm equivalent)</p>
<pre><code>yarn add -D normalize.css postcss-cli postcss-cssnext postcss-import cssnano
</code></pre>
<h3 id="postcss-config"><a href="#postcss-config" class="phenomic-HeadingAnchor">#</a>PostCSS config</h3>
<p>Create a json file that contains the config for PostCSS. The docs named it <strong>options.json</strong> but I choose <strong>postcss.json</strong> for better clarity. The comments below explain some keys.</p>
<pre><code>{
    // Enable plugins in order
    "use": [
        "postcss-import",
        "postcss-cssnext",
        "cssnano"
    ],
    "input": "main.css",
    "output": "dist/main.css",
    // use locally installed plugins (eg. in node_modules)
    "local-plugins": true,
    // Enable sourcemaps
    "map": true,
    // CSSnext and cssnano both use autoprefixer, but for different features/purposes
    // see https://github.com/MoOx/postcss-cssnext/issues/323
    "postcss-cssnext": {
        "warnForDuplicates": false
    }
}
</code></pre>
<h3 id="css-time"><a href="#css-time" class="phenomic-HeadingAnchor">#</a>CSS time</h3>
<p>Go ahead and create <strong>main.css</strong> at the project root. The above config will output to <strong>dist/</strong>. Here's a quick sample to put into the file for now.</p>
<pre><code>@import('normalize.css');

:root {
    --color-primary: blue;
    --color-secondary: red;
}
</code></pre>
<h3 id="building"><a href="#building" class="phenomic-HeadingAnchor">#</a>Building</h3>
<p>Use the postcss-cli with the config file passed in as an arg and save it as an npm script.</p>
<pre><code>"scripts": {
    "build": "node_modules/postcss-cli/bin/postcss -c postcss.json"
}
</code></pre>
<p>Now you can simply run <code>yarn run build</code> and your css will be processed and output to <strong>dist</strong>. But we can still do better.</p>
<h3 id="watch-for-changes"><a href="#watch-for-changes" class="phenomic-HeadingAnchor">#</a>Watch for changes</h3>
<p>Enabling watch will auto-transform the css file on changes. Add another npm script, which is exactly the same as <code>build</code> but with the watch flag.</p>
<pre><code>"build:dev": "node_modules/postcss-cli/bin/postcss -c postcss.json -w"
</code></pre>
<h3 id="livereload"><a href="#livereload" class="phenomic-HeadingAnchor">#</a>Livereload</h3>
<p>You wouldn't develop a CSS framework without seeing it rendered on a page so let's create a test page for development. Create <strong>index.html</strong> at the project root and populate it with some HTML, and add a link to your <strong>main.css</strong> file.</p>
<pre><code>&#x3C;!doctype html>
&#x3C;html lang="en-US">
    &#x3C;head>
        &#x3C;link rel="stylesheet" href="/dist/main.css">
    &#x3C;/head>
    &#x3C;body>
        &#x3C;main>Hello world&#x3C;/main>
    &#x3C;/body>
&#x3C;/html>
</code></pre>
<p><a href="https://www.npmjs.com/package/lr-http-server"><code>lr-http-server</code></a> will reload on changes, as well as a functioning http server.</p>
<pre><code>yarn add -D lr-http-server
</code></pre>
<p>And then register a new npm script for it</p>
<pre><code>"reload": "lr-http-server -p 3000"
</code></pre>
<h3 id="composing-scripts"><a href="#composing-scripts" class="phenomic-HeadingAnchor">#</a>Composing scripts</h3>
<p>We want the two above scripts to run in parallel so that if either the css or the html file changes the livereload server will do its job. <a href="https://www.npmjs.com/package/npm-run-all"><code>npm-run-all</code></a> with the <code>-p</code> (parallel) flag does this exactly.</p>
<pre><code>yarn add -D npm-run-all
</code></pre>
<p>Join the two tasks together into a single npm script</p>
<pre><code>"start": "npm-run-all -p build:dev reload"
</code></pre>
<p>And then run easily with</p>
<pre><code>yarn start
</code></pre>
<h3 id="done"><a href="#done" class="phenomic-HeadingAnchor">#</a>Done!</h3>
<p>You're ready to keep going developing your styles inside <strong>main.css</strong>. Feel free to improve upon this as needed!</p>
]]></description><link>https://filoxo.github.io/posts/build-a-css-framework-using-npm/</link><guid isPermaLink="true">https://filoxo.github.io/posts/build-a-css-framework-using-npm/</guid><pubDate>Tue, 14 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[An Angular Modal]]></title><description><![CDATA[<p>This post is just an exercise in creating a modal in Angular (~2 at the time of this writing). Hopefully it can shed light on some of the things to do, not do, and to always remember. Let's get to it.</p>
<h3 id="requirements"><a href="#requirements" class="phenomic-HeadingAnchor">#</a>Requirements</h3>
<p>Here are some requirements during this build that will help guide the implementation and serve as the basis for testing. It should:</p>
<ul>
<li>Have a backdrop</li>
<li>Open modal</li>
<li>Close modal</li>
<li>Prevent background scrolling when open</li>
<li>
<p>Accessible<sup>*</sup></p>
<ul>
<li>Prevent losing focus when open</li>
<li>Close with <kbd>ESC</kbd></li>
<li>Return focus to trigger on close</li>
</ul>
</li>
<li>Animate on open/close</li>
</ul>
<p class="note">
    * This is main motivation for writing this post.
</p>
<h3 id="template"><a href="#template" class="phenomic-HeadingAnchor">#</a>Template</h3>
<p>Let's start with laying out the template. This way we know what goes where.</p>
<pre><code>&#x3C;div class="backdrop" #modal>
    &#x3C;div class="contents" role="dialog">
        &#x3C;div>
            &#x3C;ng-content>&#x3C;/ng-content>
        &#x3C;/div>
        &#x3C;footer>
            &#x3C;button class="closeBtn">Close&#x3C;/button>
        &#x3C;/footer>
    &#x3C;/div>
&#x3C;/div>
</code></pre>
<p>We have a <code>.backdrop</code> element that will be a dark translucent color to provide additional focus to the modal content (fullfills requirement 1 already 🎉). The <code>#modal</code> syntax creates a local ref that we'll use later. The <code>.contents</code> element will contain the projected content via  <code>&#x3C;ng-content></code>. The <code>footer</code> aligns the <code>.closeBtn</code>. In order to help keep the focus of this article, I've excluded the <a href="https://github.com/filoxo/an-angular-modal/blob/master/src/app/app.component.css">modal component styles</a>. Visit the link to get them.</p>
<h3 id="use-in-app"><a href="#use-in-app" class="phenomic-HeadingAnchor">#</a>Use in App</h3>
<p>In order to continue developing this component, it'll have to be rendered. Let's add an instance of it to the app component, as well as a few buttons that will trigger it to open. In the App component template, add:</p>
<pre><code>&#x3C;app-modal #myModal>This is my modal&#x3C;/app-modal>
&#x3C;section class="red">
    &#x3C;p>Top&#x3C;/p>
    &#x3C;button (click)="myModal.open()">Open&#x3C;/button>
&#x3C;/section>
</code></pre>
<h3 id="open-and-close-modal"><a href="#open-and-close-modal" class="phenomic-HeadingAnchor">#</a>Open and close modal</h3>
<p>Let's add some real functionality to this component now. <code>show</code> will be the private member used to store the display state. We'll expose changing this state via <code>open()</code> and <code>close()</code> methods.</p>
<pre><code>export class ModalComponent {
    private show: boolean = false;
    ...
    open() {
        this.show = true;
    }

    close() {
        this.show = false;
    }
}
</code></pre>
<p>In conjunction, our template can use the <code>*ngIf</code> directive to display the content conditionally. Wire up the backdrop and the close button to the <code>close</code> method. Also, prevent clicks from bubbling up so the modal doesn't close if you click inside of it.</p>
<pre><code>&#x3C;div class="backdrop" #modal *ngIf="show" (click)="close()">
    &#x3C;div class="contents" (click)="$event.stopPropagation()">
        ...
        &#x3C;button class="closeBtn" (click)="close()">Close&#x3C;/button>
    &#x3C;/div>
&#x3C;/div>
</code></pre>
<p>Adding event emitters will allow us to know if a modal is opened or closed, and emit events on open and close. Add the following to the component;</p>
<pre><code>import { ..., Output, EventEmitter } from '@angular/core';
...
export class ModalComponent {
    @Output() opened = new EventEmitter&#x3C;any>();
    @Output() closed = new EventEmitter&#x3C;any>();
    ...
    open() {
        ...
        this.opened.emit(null);
    }

    close() {
        ...
        this.closed.emit(null)
    }
}
</code></pre>
<p>Done with requirements 2 &#x26; 3 👋 !</p>
<h3 id="prevent-background-scrolling-when-open"><a href="#prevent-background-scrolling-when-open" class="phenomic-HeadingAnchor">#</a>Prevent background scrolling when open</h3>
<p>This one is fairly easy: get the html element, and set it's <code>overflow</code> property based on the modal state. Here's what was added to the modal component.</p>
<pre><code>export class ModalComponent{
    ...
    private html: HTMLElement = document.querySelector('html');
    ...

    open() {
        ...
        this.preventBgScrolling();
    }

    close() {
        ...
        this.preventBgScrolling();
    }

    private preventBgScrolling() {
        this.html.style.overflow = this.show ? 'hidden' : '';
    }
}
</code></pre>
<p>#4 is completed 👍</p>
<h3 id="accessiblity"><a href="#accessiblity" class="phenomic-HeadingAnchor">#</a>Accessiblity</h3>
<p>Accessibility should never be an after thought. Though we're taking this on fairly late in development, its so that we had the proper structure and state in order to reflect the UI non-visually.</p>
<p>We started by adding <code>role="dialog"</code> to the modal <code>.contents</code>. However, adding that role alone is not sufficient to make a dialog accessible. Additionally, the dialog must be properly labeled and keyboard focus must be managed correctly.</p>
<p>In order to poperly label the dialog, we'll use both <code>aria-labelledby</code> and <code>aria-describedby</code>. The labelledby value will apply to a title option that won't be required; since its not required, the describedby value will be a fallback to provide the needed info.
In order to do this, the modal needs a unique ID that we'll use to prefix the IDs of these other elements. I won't make the ID required either, letting the component generate one if needed. Here's how that turned out:</p>
<pre><code>import { ..., OnInit, Input } from '@angular/core';

interface ModalConfig extends Object {
    title?: string;
    id?: string;
}

const defaultConfig = &#x3C;ModalConfig> {};

let id = 0;

...
export class ModalComponent implements OnInit {
    @Input() options: ModalConfig;
    ...
    ngOnInit() {
        const options = Object.assign({}, defaultConfig, this.options);
        this.id = options.id || `modal-${id++}`;
        this.titleId = `${this.id}-title`;
        this.contentId = `${this.id}-content`;
    }
}
</code></pre>
<p>Let me explain what's going on here. We declare a config interface in order to define the available options. If we wanted default options, we could establish those in <code>defaultConfig</code>. The <code>id</code> value will exist in the global classspace and will increment after being used (I found this neat trick in the Angular Material project). Next, we receive an input of type <code>ModalConfig</code> and merge it with the <code>defaultConfig</code>. If no ID is passed in, then a new one is generated automatically.</p>
<pre><code>&#x3C;div class="contents" role="dialog" id="{{ id }}"
    [attr.aria-labelledby]="title ? titleId : null"
    [attr.aria-describedby]="contentId">
    &#x3C;h2 class="title" id="{{ titleId }}" *ngIf="title">{{ title }}&#x3C;/h2>
    &#x3C;div id="{{ contentId }}">...&#x3C;/div>
&#x3C;/div>
</code></pre>
<p>The template is then enhanced by adding the IDs, a dynamic title element that renders only if a <code>title</code> option was passed in, and binds the <code>labelledby</code> and <code>describedby</code> attrs. If there is no <code>title</code> option, the <code>labelledby</code> attr isn't rendered.</p>
<h4 id="prevent-losing-focus-when-open"><a href="#prevent-losing-focus-when-open" class="phenomic-HeadingAnchor">#</a>Prevent losing focus when open</h4>
<p>First, focus needs to be given inside the modal. Then focus should be kept inside the modal as long as its open.</p>
<h4 id="close-with-kbdesckbd"><a href="#close-with-kbdesckbd" class="phenomic-HeadingAnchor">#</a>Close with <kbd>ESC</kbd></h4>
<h4 id="return-focus-to-trigger-on-close"><a href="#return-focus-to-trigger-on-close" class="phenomic-HeadingAnchor">#</a>Return focus to trigger on close</h4>
<h3 id="animations"><a href="#animations" class="phenomic-HeadingAnchor">#</a>Animations</h3>
<h3 id="improvements"><a href="#improvements" class="phenomic-HeadingAnchor">#</a>Improvements</h3>
<p>The above is a pretty good modal but perhaps it doesn't meet all of your requirements. Here are some feature that you could add:</p>
<ul>
<li>Add additional action buttons that can be enabled/disabled as options</li>
</ul>
]]></description><link>https://filoxo.github.io/posts/an-angular-modal/</link><guid isPermaLink="true">https://filoxo.github.io/posts/an-angular-modal/</guid><pubDate>Tue, 14 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Cross-platform Revisited]]></title><description><![CDATA[<p>Time has passed, technology has improved, and my preferences have also changed. In this post I'll revisit my choice of tooling. </p>
<h3 id="password-manager"><a href="#password-manager" class="phenomic-HeadingAnchor">#</a>Password manager</h3>
<p>Having put a password manager in place to store, generate, and access my passphrases has been one of the most beneficial tools I've been able to use in my day-to-day. KeePass has long been the standard for accomplishing this but the clients built around it have not kept up—at least not very well. </p>
<h4 id="keeweb"><a href="#keeweb" class="phenomic-HeadingAnchor">#</a>KeeWeb</h4>
<p><a href="https://keeweb.info/">KeeWeb</a> is built with Electron and gives the KeePass standard a decent interface on Windows, MacOS, Linux, and even as a <a href="https://app.keeweb.info/">web app</a>. It can sync with Google Drive, generate new passwords, and uses the same keyboard shortcuts as KeePassX and then some.</p>
<p>The only problem with this app is maybe a bug: it's browser autofill feature seems to populate the browser URL bar with the site and password, rather than navigating to the site before pasting in the credentials. This means that my browser history could potentially have a password in plain text. Because this is such a huge no-no I never use this feature anymore.</p>
<h4 id="lastpass"><a href="#lastpass" class="phenomic-HeadingAnchor">#</a>LastPass</h4>
<p>I've also recently started using LastPass to store my work credentials as a way of keeping business and personal life separate. So far, LastPass has the most refined UI for managing user credentials. The website is further enhanced by adding a Chrome extension (thus meaning it can be used on all of the desktop platforms) as well as native mobile apps. I can't speak for iOS but on Android this app is a God-send. It taps into Android's accessibility features to allow it to monitor for password input fields. It injects the matching credentials very quickly and easily. </p>
<p>The mobile app can use your device's fingerprint sensor to unlock your database. You can even store other things, like product licenses, ssh keys, and file attachements. Novemeber of 2016 LastPass also made it free to use its mobile client so its now easier to use it anyway. </p>
<p>If you aren't using a password manager, I would recommend starting right now with LastPass. </p>
<h3 id="mobile-interoperability"><a href="#mobile-interoperability" class="phenomic-HeadingAnchor">#</a>Mobile interoperability</h3>
<p>Nothing has changed on this front for me personally. While I'm still in envy about the iOS ecosystem and it's native interoperability, PushBullet still does the job for me. I use Mac anc Linux computers as well as Android and iOS mobile devices regularly. </p>
<p>I did sign up for the T-Mobile DIGITS beta, but... that's a bit far from polished for my liking.</p>
<h3 id="terminal"><a href="#terminal" class="phenomic-HeadingAnchor">#</a>Terminal</h3>
<p>I was unexpectedly pleased when I decided to try out <a href="https://github.com/zeit/hyper">Hyper terminal</a>. Also built on Electron, this terminal wrapper has gained a lot of popularity which in turns means its plugin ecosystem is thriving. For example, you can enable mouse scrolling to get through long documents using <code>hyperterm-alternatescroll</code>; or make links clickable by holding down a key with <code>hyperlinks-iterm</code>. Because all of this is stored in a config file I pulled over my settings and preferences to my work computer with a simple copy/paste. </p>
<h3 id="ide"><a href="#ide" class="phenomic-HeadingAnchor">#</a>IDE</h3>
<p>I have long since been a fan of the JetBrains suite of IDEs. They do a great job of pulling together many tools into one application. But I've found that for small side projects &#x26; demos it is very heavy and a little distracting. SublimeText and Atom are great simple solutions but VS Code has taken their place for me. VS Code provides a balance between simplicity and functionality, so its not overly simplistic right out of the box. Built in Git tools, console window, and debugger are <em>really</em> useful for getting hacking quickly. And of course, because its also an Electron app, its plugin ecosystem has whatever you might ask for. Here are the ones I use:</p>
<ul>
<li>Angular 2 TypeScript snippets</li>
<li>Auto-open Markdown Preview</li>
<li>Debugger for Chrome</li>
<li>EditorConfig for VS Code</li>
<li>Git History</li>
<li>JavaScript (ES6) code snippets</li>
<li>JSX</li>
</ul>
<h2 id="fin"><a href="#fin" class="phenomic-HeadingAnchor">#</a>Fin</h2>
<p>My objective here is just to give another perspective and voice to tools you might not have thought to try. Have any questions? Feel free to reach out. </p>
]]></description><link>https://filoxo.github.io/posts/crossplatform-revisited/</link><guid isPermaLink="true">https://filoxo.github.io/posts/crossplatform-revisited/</guid><pubDate>Sun, 05 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Recommended Resources]]></title><description><![CDATA[<p>There are lots of great resources out there for the front-end developer who wants to keep learning. I know that I've been able to glean much just from joining and listening to the right sources. Here's a list of my favorite people/blogs/podcasts to listen to. Get ready for a huge link list!</p>
<!-- more -->
<h2 id="twitter"><a href="#twitter" class="phenomic-HeadingAnchor">#</a>Twitter</h2>
<p>There are a ton of really smart people on Twitter, most of whom I don't get a chance to talk to on a regular basis (if ever, actually). But I can "listen in" on their public conversations and chime in when I have something to offer.</p>
<p>I've grouped these people by the main topics they talk about.</p>
<h4 id="javascript"><a href="#javascript" class="phenomic-HeadingAnchor">#</a>Javascript</h4>
<ul>
<li><a href="https://twitter.com/_ericelliott">Eric Elliott</a> -  practical advice, smart writing</li>
<li><a href="https://twitter.com/mpjme">Mattias Johansson</a> - also check out his Youtube channel, 'Fun Fun Function'</li>
</ul>
<h4 id="react"><a href="#react" class="phenomic-HeadingAnchor">#</a>React</h4>
<ul>
<li><a href="https://twitter.com/dan_abramov">Dan Abramov</a> - main author of Redux</li>
<li><a href="https://twitter.com/ryanflorence">Ryan Florence</a> - main contributor to React Router</li>
<li><a href="https://twitter.com/mjackson">Michael Jackson</a> - main contributor to React Router</li>
<li><a href="https://twitter.com/thejameskyle">James Kyle</a> - Facebook developer</li>
<li><a href="https://twitter.com/kentcdodds">Kent Dodds</a> - all around savvy guy</li>
</ul>
<h4 id="angular-2"><a href="#angular-2" class="phenomic-HeadingAnchor">#</a>Angular 2</h4>
<ul>
<li><a href="https://twitter.com/victorsavkin">Victor Savkin</a> - main architect of Angular Router</li>
<li><a href="https://twitter.com/gdi2290">Patrick Stapleton</a> - contributor to Angular Universal, Angular Class</li>
</ul>
<h4 id="other"><a href="#other" class="phenomic-HeadingAnchor">#</a>Other</h4>
<ul>
<li><a href="https://twitter.com/marcysutton">Marcy Sutton</a> - A11Y guru</li>
<li><a href="https://twitter.com/sarah_edo">Sarah Drasner</a> - CSS/web afficionada</li>
</ul>
<h4 id="news"><a href="#news" class="phenomic-HeadingAnchor">#</a>News</h4>
<ul>
<li><a href="https://twitter.com/JavaScriptDaily">JS Daily</a></li>
<li><a href="https://twitter.com/frontendfront">Front-End Front</a></li>
</ul>
<h4 id="tools"><a href="#tools" class="phenomic-HeadingAnchor">#</a>Tools</h4>
<ul>
<li><a href="https://twitter.com/ChromiumDev">Chrome Developers</a></li>
<li><a href="https://twitter.com/eggheadio">Egghead.io</a></li>
</ul>
<p>I'm sure I missed some people on this list. It can't be comprehensive. But hopefully its a start for you.</p>
<p>Consider also following any of the accounts for meetups in your local area. For example, here in Utah where I live, <a href="https://twitter.com/utjs">UtahJS</a>, <a href="https://twitter.com/reactjsutah">ReactJS Utah</a>, <a href="https://twitter.com/IonicUtah">Ionic Utah</a> are on my radar too.</p>
<h2 id="blogs"><a href="#blogs" class="phenomic-HeadingAnchor">#</a>Blogs</h2>
<p>Blogs are great for laying out a lot of content/ideas so they take more time to consume. Time is of the essence and I generally won't read a blog post unless its very interesting to me. Here are the ones I watch.</p>
<ul>
<li><a href="https://www.reddit.com/r/coolgithubprojects/">r/coolgithubprojects</a></li>
<li><a href="https://www.reddit.com/r/SideProject/">r/SideProject</a></li>
<li><a href="https://www.reddit.com/r/webdev/">r/webdev</a></li>
<li><a href="https://www.reddit.com/r/Angular2/">r/angular2</a></li>
<li><a href="https://www.reddit.com/r/reactjs/">r/reactjs</a></li>
<li><a href="https://frontendfront.com/">Front end Front</a></li>
<li><a href="https://css-tricks.com/">CSS Tricks</a></li>
<li><a href="https://www.smashingmagazine.com/">Smashing Magazine</a></li>
<li><a href="https://medium.com/on-Coding">On Coding - Medium</a></li>
</ul>
<h4 id="news-1"><a href="#news-1" class="phenomic-HeadingAnchor">#</a>News</h4>
<p>News outlets aren't blogs really, but its great to stay in the loop about technology in general. Oh Twitter is looking to sell? Microsoft has the most open-source contributors on Gihutb? What's Google's latest hardware project? It's a good idea to be generally informed on technology.</p>
<ul>
<li><a href="https://jaxenter.com/">JAXenter</a></li>
<li><a href="https://nakedsecurity.sophos.com">Naked Security</a></li>
<li><a href="phys.org/technology-news/">Phys.org - Technology News</a></li>
<li><a href="arstechnica.com/">ArsTechnica</a></li>
<li><a href="https://www.engadget.com/">Engadget</a></li>
<li><a href="gizmodo.com/">Gizmodo</a></li>
<li><a href="mashable.com/">Mashable</a></li>
<li><a href="https://techcrunch.com/">TechCrunch</a></li>
</ul>
]]></description><link>https://filoxo.github.io/posts/recommended-resources/</link><guid isPermaLink="true">https://filoxo.github.io/posts/recommended-resources/</guid><pubDate>Thu, 22 Sep 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Install zsh on Mac without homebrew]]></title><description><![CDATA[<p>I'm not a big supporter of Homebrew. It just doesn't solve any problems for me. I have only needed brew for <code>zsh</code> and maybe <code>node</code> (but for that I could use <a href="https://github.com/creationix/nvm"><code>nvm</code></a> or <a href="https://github.com/tj/n"><code>n</code></a>). I don't want to install brew just for those when they can be set up easily. Seems like a lot of overhead just for one function.</p>
<p>That said, I had a lot of trouble finding how to get <code>zsh</code> installed without <code>brew</code>. Seems like a lot of people have bought into it for what that it offers.</p>
<p>So here's how I installed <code>zsh</code> on my machine without brew.</p>
<ol>
<li>
<p>Get the source tarball (<code>zsh-*.tar.gz</code>) from <a href="http://zsh.sourceforge.net/Arc/source.html">zsh.org</a></p>
</li>
<li>
<p>Unpack the file</p>
<pre><code class="hljs language-sh">tar xzf zsh-5.2.tar.gz</code></pre>
</li>
<li>
<p>Build the binary. This will install <code>zsh</code> under <code>/usr/local/bin/zsh</code></p>
<pre><code class="hljs language-sh">./configure &#x26;&#x26; make &#x26;&#x26; make <span class="hljs-built_in">test</span> &#x26;&#x26; make install</code></pre>
<ul>
<li>The version of <code>zsh</code> that ships on Mac machines is outdated, thus why its necessary to build the binary.</li>
<li>You may get an error message saying <code>install: /usr/local/bin/zsh-5.2: Permission denied</code>. If so, you will need to <code>sudo make install</code> instead.</li>
</ul>
</li>
<li>
<p>You now have <code>zsh</code> installed and working on your system. Begin configuring it by running <code>zsh</code> in your terminal; you'll see a series of prompts to enable and disable features to your liking.</p>
</li>
<li>
<p>Next, you'll want to also install <a href="https://github.com/robbyrussell/oh-my-zsh"><code>oh-my-zsh</code></a>. It makes zsh even more awesome by building in additional plugins and themes. This was the install script at the time of this writing.</p>
<pre><code class="hljs language-sh">sh -c <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></code></pre>
<ul>
<li>NOTE: you should read the contents of <code>install.sh</code> before directly piping it into your shell. Ya know, because security.</li>
</ul>
</li>
<li>
<p>Customize your heart out! Become familiar with the themes and plugins now available to you. Enable those which you might use most.</p>
</li>
<li>
<p>Make sure everything works. I had exported some paths in my <code>~/.bash_profile</code> file, and needed to copy those over to <code>~/.zshrc</code>.</p>
<ul>
<li>For some reason, <code>nvm</code> was one of those things that I couldn't get to work quite right. I tried adding the paths to the zsh profile, making sure <code>$NVM_DIR</code> was correctly set, etc. Reinstalling was the only way I got it to work again.</li>
</ul>
</li>
<li>
<p>For these changes to persist, you'll have to change your default shell. The easiest is to just access the setting through the UI. You could do this with a terminal command, so Google it.</p>
<ul>
<li>Open "System Preferences"</li>
<li>Click on "Users &#x26; Groups"</li>
<li>Unlock the settings by clicking on the padlock and entering your password.</li>
<li>CTRL + Click on your user and select "Advanced options..."</li>
<li>Choose <code>/bin/zsh</code> from the <em>Login shell</em> dropdown</li>
<li>Click OK to complete</li>
</ul>
</li>
</ol>
<h2 id="bonus"><a href="#bonus" class="phenomic-HeadingAnchor">#</a>Bonus</h2>
<p>Don't let the fun end there. Here's a few more things you can do to further refine your terminal to your liking.</p>
<h4 id="disable-last-login-banner"><a href="#disable-last-login-banner" class="phenomic-HeadingAnchor">#</a>Disable 'last login' banner</h4>
<p>When I open up the terminal I see a line at the top saying something like</p>
<blockquote>
<p>Last login: Mon Jan 1 12:00:00 on ttys004</p>
</blockquote>
<p>This information is not very relevant to me, so I'd rather not see it. Silence this message by simply creating a <code>.hushlogin</code> file.</p>
<pre><code>touch ~/.hushlogin
</code></pre>
<h4 id="disable-the-user-banner"><a href="#disable-the-user-banner" class="phenomic-HeadingAnchor">#</a>Disable the user banner</h4>
<p>You can disable the user banner by simply adding <code>DEFAULT_USER="yourusername"</code> to your profile file.</p>
<h4 id="get-a-better-font"><a href="#get-a-better-font" class="phenomic-HeadingAnchor">#</a>Get a better font</h4>
<p>I quickly became a fan of the Agnoster theme, but it required patched fonts (<a href="https://github.com/powerline/fonts">Powerline fonts</a>) to be installed in order to display some of the special characters it uses (eg. git icons). I'm a fan of Source Code Pro, but I've also heard great things about Meslo, Inconsolata, and Terminus.</p>
]]></description><link>https://filoxo.github.io/posts/Install-zsh-on-Mac-without-homebrew/</link><guid isPermaLink="true">https://filoxo.github.io/posts/Install-zsh-on-Mac-without-homebrew/</guid><pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Must-have Apps: Windows edition]]></title><description><![CDATA[<p>I believe that developers can benefit and learn from others' favorite suite of tools. I'll go over my favorite applications that help me be as efficient and quick while working on a Mac.</p>
<h3 id="launchy"><a href="#launchy" class="phenomic-HeadingAnchor">#</a>Launchy</h3>
<p>After switching to a Mac, I love Spotlight. I now have to use Windows computer at work, so I really missed having the Spotlight available. <a href="http://www.launchy.net/">Launchy</a> achieves this on Windows really well, indexing the *.lnk files in your start menu and User folder, and making the shortcuts available using <code>ALT + SPACE</code>. It even does simple calculations (just like Spotlight!), allows for website shortcuts, and is themable. Its a tad better than Spotlight because of those last features.</p>
<blockquote>
<p>Pro tip: it can even run commands from the launcher. An example: hit <code>ALT + SPACE</code>, type cmd, hit <code>TAB</code>, and type a command that is available to your environment like <code>ping</code> or <code>ipconfig</code>. Life-changing? Probably not. But it does save me about 5 seconds!</p>
</blockquote>
<p>Launchy is free to use, but it is so valuable that you should consider making a donation if you use it.</p>
<h3 id="greenshot"><a href="#greenshot" class="phenomic-HeadingAnchor">#</a>Greenshot</h3>
<p>I also really liked Mac's built in screenshot utility, mainly because of the drop shadow it automatically generates. They look high quality and ready to ship and share.
<a href="http://getgreenshot.org/">Greenshot</a> does all of that and a whole lot more. Here are some of the highlights:</p>
<ul>
<li>It shows a magnifier for precision start/finish points</li>
<li>has a built in image editor that you can use to add drop shadow effects, "torn paper" effect, obfuscate text, highlight, and more</li>
<li>
<p>comes prepackaged with some snazzy plugins to automatically upload to Box, Imgur, and the whole Office Suite.</p>
<ul>
<li>It is missing integration with major services like Google Drive, Dropbox, and OneDrive but you can work around that by setting a default save location to be inside your local synced folder.</li>
</ul>
</li>
<li>overrides the default <code>PrtScn</code> key and variations (eg. <code>ALT + PrtScn</code>) for quick and easy screenshots</li>
</ul>
<p>Seriously, this one is great for non-techy people too. One of my old Project Management teams adopted it solely because of the Jira integration plugin. Awesome! Plus Greenshot is open source and free!</p>
<h3 id="colorcop"><a href="#colorcop" class="phenomic-HeadingAnchor">#</a>ColorCop</h3>
<p>Similar to Sip for Mac, <a href="http://colorcop.net/">ColorCop</a> is a handy tool that lets you grab colors from anything on your screen. It automatically shows a magnified eyedropper so you can select a color with more precision. Its also configurable so it can automatically copy the HEX or RGB value to your clipboard. Great for when you need to pull colors from, say, a website mockup as a PSD file into your CSS file. ColorCop is free, but also accepts donations if you find it useful.</p>
<h3 id="cmder"><a href="#cmder" class="phenomic-HeadingAnchor">#</a>Cmder</h3>
<p>I only recently was introduced to <a href="http://gooseberrycreative.com/cmder/">Cmder</a>, a new project to fill the need for actually amazing and useful console emulators on Windows. It uses the popular Monokai color scheme right out of the box, utilizes msysgit to provide Unix commands in the PATH, offers tabs for multiple consoles, and is totally portable. This thing has won my heart over, and I will probably never use CygWin again. Its still a work in progress so visit <a href="https://github.com/bliker/cmder">Cmder's Github repo</a> if you have issues.</p>
]]></description><link>https://filoxo.github.io/posts/Must-have-Apps-Windows-edition/</link><guid isPermaLink="true">https://filoxo.github.io/posts/Must-have-Apps-Windows-edition/</guid><pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Must-have Apps: Mac edition]]></title><description><![CDATA[<p>I believe that developers can benefit and learn from others' favorite suite of tools. I'll go over my favorite applications that help me be as efficient and quick while working on a Mac.</p>
<h3 id="bettertouchtool"><a href="#bettertouchtool" class="phenomic-HeadingAnchor">#</a>BetterTouchTool</h3>
<p>I find <a href="http://www.bettertouchtool.net/">BetterTouchTool</a> better than using <a href="https://itunes.apple.com/us/app/bettersnaptool/id417375580?mt=12">BetterSnapTool</a>, <a href="http://www.irradiatedsoftware.com/sizeup/">SizeUp</a>, or <a href="http://spectacleapp.com/">Spectacle</a> for one simple reason: it also includes keyboard/gesture customizations per app and globally. Don't get me wrong, they're all pretty great window managers. BetterSnapTool has some more features than BetterTouchTool, but BTT does all that I need it to. Right out of the box, you can define window snapping behavior, such as:</p>
<ul>
<li>Snap when dragged to window edge (left, right, top)</li>
<li>Restore window size when dragged away</li>
<li>Animate preview window</li>
</ul>
<p>That's really all I need because I wanted to replicate Window's AeroSnap functionality that is missing from OSX. But my workflow is also enhanced by adding custom shortcuts that can remap and shorten existing ones, or adds new ones. Here are a few that I can't live without:</p>
<ul>
<li>
<p>Global</p>
<ul>
<li><kbd>⌘</kbd><kbd>→</kbd> : Snap window to right</li>
<li><kbd>⌘</kbd><kbd>←</kbd> : Snap window to left</li>
<li><kbd>⌘</kbd><kbd>↑</kbd> : Maximize window</li>
<li>Press <kbd>⌥</kbd><kbd>⌃</kbd><kbd>⌘</kbd><kbd>8</kbd> to invert or revert the screen colors</li>
</ul>
</li>
<li>
<p>Chrome specific</p>
<ul>
<li><kbd>F12</kbd> was remapped to run <kbd>⌘</kbd><kbd>⌥</kbd><kbd>I</kbd> to bring up the Developer tools like on Windows</li>
</ul>
</li>
<li>
<p>Firefox specific</p>
<ul>
<li>I borrowed Chrome's <kbd>⌘</kbd><kbd>⇧</kbd><kbd>N</kbd> to remap Firefox's keyboard shortcut (<kbd>⌘</kbd><kbd>⇧</kbd><kbd>P</kbd>) for opening a new window in Private mode. This way I only need to remember one shortcut</li>
</ul>
</li>
<li>
<p>Finder</p>
<ul>
<li>I don't know why swipe navigation in Finder isn't already built in; it makes sense to have it.</li>
<li>"2 finger swipe right" in Finder will trigger <kbd>⌘</kbd><kbd>[</kbd> which is the hidden keyboard shortcut for "back". Yay for less work!</li>
<li>Similarly "2 finger swipe left" will trigger <kbd>⌘</kbd><kbd>]</kbd> to navigate forward.</li>
</ul>
</li>
</ul>
<h3 id="sip"><a href="#sip" class="phenomic-HeadingAnchor">#</a>Sip</h3>
<p>Sometimes I just need to know the HEX or RGB value of a color I see online, in an image, or on an application and <a href="https://itunes.apple.com/us/app/sip/id507257563?mt=12">Sip</a> is my tool of choice. To pick a color, a magnifier shows up for precise color selection. You can copy the selected color value/code in an unbelievable amount of formats.</p>
<p>The Pro version costs $9.99 from the App Store. Since this one is only for Mac, you might also check out ColorCop on my Windows post.</p>
<h3 id="iterm2"><a href="#iterm2" class="phenomic-HeadingAnchor">#</a>iTerm2</h3>
<p>I recently switched from <a href="http://totalterminal.binaryage.com/">TotalTerminal</a> to <a href="https://www.iterm2.com/">iTerm2</a> because I need something a little bit more customizable. The two are not the same: TotalTerminal is a plugin that creates hotkeys for Mac's <code>Terminal.app</code>. iTerm2 is a replacement for Terminal.app, and as such offers quite a bit more in terms of changing colors schemes, appearance, hotkeys and gestures, and even provides tabs. If you use the console a lot, I recommend at least giving iTerm2 a try.</p>
]]></description><link>https://filoxo.github.io/posts/Must-have-Apps-Mac-edition/</link><guid isPermaLink="true">https://filoxo.github.io/posts/Must-have-Apps-Mac-edition/</guid><pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Must-have Apps: Cross-platform edition]]></title><description><![CDATA[<p>I believe that developers can benefit and learn from others' favorite suite of tools. I'll go over my favorite applications that help me be as efficient and quick while working on a Mac.</p>
<h3 id="flux"><a href="#flux" class="phenomic-HeadingAnchor">#</a>F.lux</h3>
<p><a href="https://justgetflux.com/">F.lux</a> is a great example of cross-platform compatibility. It comes with presets that are fine enough for me, and is available for Mac, Windows, and Linux. I installed it on my two computers that I use regularly, one a Mac and the other running Windows. The peeps at F.lux have gone through a lot of research to set the foundation of why their application is so useful. This is a must for anyone on their computer passed 6pm.
The've recently released an Android Beta app, but might become superseded by Apple's Night Shift and Android N's Night Mode.</p>
<h3 id="keepass"><a href="#keepass" class="phenomic-HeadingAnchor">#</a>KeePass</h3>
<p>Alright here's one that I've debated with friends about. There are alternatives like LastPass and 1Password, but I'm always one to avoid paying money. <a href="http://keepass.info/">KeePass</a> is my favorite so far for several reasons.</p>
<ul>
<li>It is free and open-source software. Freedom!</li>
<li>It is cross-platform. Use it on Windows, Mac, Linux, Android, iOS, Windows Phone, Chromebook, and even BlackBerry.</li>
<li>They all use the same database filetype. You could save your database file to the cloud using Google Drive, OneDrive, Dropbox, etc. and use the same file among multiple clients.</li>
<li>Use in conjunction with <a href="https://chrome.google.com/webstore/detail/chromeipass/ompiailgknfdndiefoaoiligalphfdae?hl=en">chromeIPass</a> (Chrome extension) or <a href="https://addons.mozilla.org/en-us/firefox/addon/passifox/">PassIFox</a> (Firefox add-on) to populate your credentials into login inputs if a URL is matched to an entry's site field.</li>
</ul>
<h3 id="pushbullet"><a href="#pushbullet" class="phenomic-HeadingAnchor">#</a>PushBullet</h3>
<p>I really couldn't stand to use the iPhone (personal preference!) despite its great interoperability with the Macbook. <a href="https://www.pushbullet.com/">PushBullet</a> makes up for that loss by allowing me to receive notifications from my phone while on my computer, as well as letting me respond directly to text messages. An additional bonus is that I can use this on my Windows machine as well as other Android devices (think tablet). This way, I can see my notifications and respond to texts from literally any of my devices. Lastly, it allows me to push things like notes, links, and files between devices as well. Send a link from my phone to my desktop, push a new background image from my phone to my tablet, whatever. Its awesome!</p>
<h3 id="synergy"><a href="#synergy" class="phenomic-HeadingAnchor">#</a>Synergy</h3>
<p><a href="http://synergy-project.org/">Synergy</a> is a super handy utility that bridges multiple computers so that you can share one keyboard and mouse between them. You can use them multiple machines with the same keyboard, copy and paste from one to the other, and even transfer files using drag-n-drop (ahem, sorry. Between Windows-Mac only). Need it for enterprise? You can use the Pro version to encrypt your traffic using SSL. Its absolutely necessary if you work on different machines.</p>
]]></description><link>https://filoxo.github.io/posts/Must-have-Apps-Cross-platform-edition/</link><guid isPermaLink="true">https://filoxo.github.io/posts/Must-have-Apps-Cross-platform-edition/</guid><pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Firebase Email Auth and Validation]]></title><description><![CDATA[<p>If you use Firebase, you'd be inclined to use their authentication for you system because of how amazingly easy it is to get started. They offer a variety of methods: email &#x26; password, oAuth with Google/Twitter/Facebook/Github, or even custom auth.</p>
<p>A few days ago, a new Firebase user asked a very interesting help question in my school Slack channel:</p>
<blockquote>
<p>I am looking at Firebase's authentication set up with email and password and I can find no way to set any password rules. For example I could create the password "j". Is there a way to set at least a minimum password length?</p>
</blockquote>
<p>Having only used oAuth myself, I figured you could simply create a <a href="https://www.firebase.com/docs/security/api/rule/validate.html"><code>.validate</code> rule</a> and once in place, perform basic <a href="https://www.firebase.com/docs/security/api/string/">string operations</a> to test whether it actually passes or not. Easy right? <em>Unfortunately, no.</em></p>
<p>You actually don't have access to any of the user data with the email &#x26; password option. Firebase manages the email and password. That's pretty much the point of that scheme.
That also means you're left at the mercy of the security rules enforced (or not!) by Firebase. So a user can create a password with <em>just one character</em> and the developer is only left with client-side validation. If you want any sort of granular control in the authentication flow, you'll have go to with Custom Authentication.</p>
<h3 id="help-me-obi-wan"><a href="#help-me-obi-wan" class="phenomic-HeadingAnchor">#</a>Help me Obi-Wan</h3>
<p>The Firebase gurus on the <a href="https://www.firebase.com/blog/2016-02-26-firebase-slack-community.html">Firebase Slack channel</a> offered an alternative for managing and verifying this data while still not owning the auth process.</p>
<ul>
<li>Add a security rule to the user profile in your database, something like <code>isVerified</code></li>
<li>
<p>Pass the username and password to a server API call</p>
<ul>
<li><a href="https://github.com/firebase/firebase-queue">Firebase Queue</a> is an elegant alternative to a REST API</li>
</ul>
</li>
<li>Create a task that can invalidate bad passwords or add the <code>isVerified</code> field accordingly</li>
</ul>
<p>Couple this with client-side validation and you'd be able to rest easier having implemented better security practices. I'm not 100% convinced that it is a <em>great</em> solution, but it is still much better than leaving everything to be validated on the client.</p>
]]></description><link>https://filoxo.github.io/posts/Firebase-Email-Auth-and-Validation/</link><guid isPermaLink="true">https://filoxo.github.io/posts/Firebase-Email-Auth-and-Validation/</guid><pubDate>Thu, 28 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Welcome back to the future of static website!]]></title><description><![CDATA[<!-- start lipsum code -->
<!-- http://www.deloreanipsum.com/ -->
<p>Ahh. Hey, Doc, we better back up, we don't have enough roads to get up to 88. Hi. Where were we. In that case, I'll tell you strait out.</p>
<p>Thank you, don't forget to take a flyer. Look, I'm just not ready to ask Lorraine out to the dance, and not you, nor anybody else on this planet is gonna make me change my mind. Over there, on my hope chest. I've never seen purple underwear before, Calvin. What's with the life preserver? Working.</p>
<p>I still don't understand, how am I supposed to go to the dance with her, if she's already going to the dance with you. Our first television set, Dad just picked it up today. Do you have a television? I hope so. Uh, look me up when you get there. Stand tall, boy, have some respect for yourself. Don't you know that if you let people walk all over you know, they'll be walking all over you for the rest of your life? Listen to me, do you think I'm gonna spend the rest of my life in this slop house?</p>
<p>Where were we. That's for messing up my hair. I'm sure that in 1985, plutonium is available at every corner drug store, but in 1955, it's a little hard to come by. Marty, I'm sorry, but I'm afraid you're stuck here. Where's Einstein, is he with you? Listen, this is very important, I forgot my video camera, could you stop by my place and pick it up on your way to the mall?</p>
<p>Hi. Now Biff, don't con me. Of course I do. Just a second, let's see if I could find it. George, buddy. remember that girl I introduced you to, Lorraine. What are you writing? Let's go.</p>
<!-- end lipsum code -->
]]></description><link>https://filoxo.github.io/posts/hello-world/</link><guid isPermaLink="true">https://filoxo.github.io/posts/hello-world/</guid><pubDate>Sun, 14 Feb 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[First Post, no hero.]]></title><description><![CDATA[<p>This is the first post!</p>
<p>Code is highlighted by default.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> StatelessComponent = <span class="hljs-function">(<span class="hljs-params">props</span>) =></span> {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>
      I‘m a stateless component that accepts children
      { props.children }
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  )
}

<span class="hljs-comment">// ...</span>

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">StatelessComponent</span>></span>
      Example of child
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">StatelessComponent</span>></span></span>
  )</code></pre>
]]></description><link>https://filoxo.github.io/posts/first-post/</link><guid isPermaLink="true">https://filoxo.github.io/posts/first-post/</guid><pubDate>Fri, 22 Jan 2016 00:00:00 GMT</pubDate></item></channel></rss>