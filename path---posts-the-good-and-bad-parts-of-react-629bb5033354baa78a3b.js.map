{"version":3,"sources":["webpack:///path---posts-the-good-and-bad-parts-of-react-629bb5033354baa78a3b.js","webpack:///./.cache/json/posts-the-good-and-bad-parts-of-react.json"],"names":["webpackJsonp","298","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","pathContext","prev","excerpt","id","timeToRead","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,u/BAAAC,aAA6gCC,KAAA,oBAAAC,KAAA,yCAAAC,MAAA,SAAAC,MAAA,kCAAqIC,aAAgBC,MAAQC,QAAA,0PAAAR,KAAA,wlEAAAS,GAAA,oGAAAC,WAAA,EAAAT,aAA0+EC,KAAA,2BAAAC,KAAA,uBAAAC,MAAA,aAAAC,MAAA,kBAA8GM,MAASH,QAAA,6PAAAR,KAAA,sxIAA2xHS,GAAA,wHAAAC,WAAA,EAAAT,aAAo6BC,KAAA,2BAAAC,KAAA,2CAAAC,MAAA,WAAAC,MAAA","file":"path---posts-the-good-and-bad-parts-of-react-629bb5033354baa78a3b.js","sourcesContent":["webpackJsonp([111649292585113],{\n\n/***/ 298:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten and Angular 1 app in React, and have chosen to use Vue for my personal projects for now. These are some of my thoughts on what I found to be some good and bad parts of React.</p>\\n<h3>The Good</h3>\\n<ul>\\n<li>An extremely healthy ecosystem exists around React. This is honestly the biggest win that I love as a developer. Sharable components, alternative libs, build toolkits, and even React alternatives are </li>\\n<li>Testing is amazingly easy, Enzyme's shallow render is awesome!</li>\\n<li>‚Äésmall components</li>\\n<li>‚ÄéPlays nicely with existing js libs, as well as modules</li>\\n<li>Tooling is great, be able interact with your components, data stores is so nice</li>\\n</ul>\\n<h3>The Bad</h3>\\n<ul>\\n<li>decision fatigue</li>\\n<li>‚ÄéRequires understanding of some FP concepts</li>\\n<li>‚ÄéHOCs get out of control</li>\\n</ul>\\n<h2>Conclusion</h2>\",\"frontmatter\":{\"date\":\"November 30, 2017\",\"path\":\"/posts/the-good-and-bad-parts-of-react\",\"tags\":[\"react\"],\"title\":\"The üëç and üëé parts of React\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"I recently started a new job and was able to request a new keyboard. I got the Anne Pro with red switches, and have been mostly in love with it. I still felt like there were some improvements to be made, so I took a stab at it. Foam mod I noticed‚Ä¶\",\"html\":\"<p>I recently started a new job and was able to request a new keyboard. I got the Anne Pro with red switches, and have been mostly in love with it. I still felt like there were some improvements to be made, so I took a stab at it.</p>\\n<h3>Foam mod</h3>\\n<p>I noticed that the plastic case is pretty loud when bottoming out. It sounds like a loud, dull thud. It was honestly not too bad but I'm more of a fan of silent keyboards at work. </p>\\n<p>I was able to get some ¬º\\\" foam padding from a friend, and cut it up to the dimensions of the case bottom. This was pretty straightforward, just cut the holes for the case screws and the reset button. This reduces the thunking greatly. </p>\\n<h3>Replaced switches</h3>\\n<p>I replaced the default Gateron Red switches with some modified Kailh Heavy Dark Yellow switches that I purchased from r/mechmarket for cheaper than retail. 40 of these switches were lubricated and had a 80g springs, the rest were factory stock 70g. </p>\\n<p>Surprisingly, heavy springs are helping me become a better touch typist since its harder to bottom out. My hands do get more tired after typing for a long time, but I don't write novels and even typing this post hasn't fatigued my hands much. </p>\\n<h3>Clipped and stuffed stabilizers</h3>\\n<p>Most of the rattle noise is due to the stabilizers. While the switches were removed, I took apart the stabs. I clipped them to reduce the amount of parts that touch, and \\\"stuffed\\\" them with thin foam padding to reduce the movement even more. They are now much quieter and help me keep my sanity! I wondered if stabilizer grease would have been better but I'm very happy now. </p>\\n<h3>Additional modifications</h3>\\n<p>There are 2 additional modifications I'll be adding in the future: installing a dedicated hardware switch, and changing the firmware.</p>\\n<p>I've already purchased a cheap hardware switch for this and am just waiting for it to arrive. </p>\\n<p>The firmware is still under heavy development and isn't feature-complete enough to use as a daily driver, unfortunately. Keep checking in on this project though. It's making lots of progress!</p>\",\"id\":\"/Users/cfiloteo/dev/blog/src/pages/2018-04-20-anne-pro-mods.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2018-04-20T00:00:00.000Z\",\"path\":\"/posts/anne-pro-mods\",\"tags\":[\"keyboards\"],\"title\":\"Anne Pro mods\"}},\"next\":{\"excerpt\":\"I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten an Angular 1 app in React, and have chosen to use Vue for my personal projects for now‚Ä¶\",\"html\":\"<p>I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten an Angular 1 app in React, and have chosen to use Vue for my personal projects for now. These are some of my thoughts on what I found to be some good and bad parts of Angular.</p>\\n<h3>The Good</h3>\\n<ul>\\n<li>As a full framework, you'll experience less decision fatigue and won't have lib fragmentation (eg. team A uses Axios, team B uses Superagent).</li>\\n<li>‚ÄéTypeScript makes JavaScript feel familiar to backend/full-stack devs.</li>\\n<li>RxJS/‚ÄéObservables are so awesome! This reactive data flow also helps you keep your components UI-focused.</li>\\n<li>‚ÄéThe Angular CLI is fantastic! Its so good, in fact, that it hardly makes sense to use anything else.</li>\\n<li>‚ÄéPredictable and periodic framework updates set a great rhythm. Of course, this is personal preference. I've read some other peoples' struggles with having gotten too far behind... but the cadence with which Angular releases feels just right.</li>\\n<li>The animations API is good when it works. React's TransitionGroup is the equivalent, but most React beginners don't know about it or how to find it to solve animations with components mounting/unmounting. The Angular animations work well for this same usage, but there have been quite a few bugs with it between versions. I had to revert to CSS animations. Hopefully they've been fixed and that has stablized.</li>\\n</ul>\\n<h3>The Bad</h3>\\n<ul>\\n<li>With TypeScript it is easy to bloat your code &#x26; forget to push business logic down to the server.</li>\\n<li>‚ÄéModules+routes are the only option for creating code split boundaries. So far, there hasn't been a community-built solution for code splitting elsewhere.</li>\\n<li>Using Services to manage state is hard. It almost doesn't make sense to have Services and I'm about 90% sure this syntax was carried over for those who have a hard time migrating from Angular 1. Because of this there is little to no standardization on how services should work or be used. We ended up using Services to only hold Observables...</li>\\n<li>‚ÄéGood luck trying to get any native js modules to work. Maybe that lib doesn't have types. Or requires a browser global. Or can't be statically analyzed by the TS compiler... The list goes on.</li>\\n<li>Testing is just BAD. Testing requires 30+ lines of boilerplate, and requires a lot of ceremony. I have not written a test that actually works with Angular that hasn't felt extremely frail. From configuring the TestBed to updating selectors, testing is a huge burden compared to how easy it is with React and Vue.</li>\\n<li>Angular errors are convoluted and imprecise. Welcome to debugging hell. üëø</li>\\n<li>Having a wrapping host element is bad for styling. This is mainly because we have a legacy style framework. One such problem was with a widget that uses immediate child selectors, and the host element prevents this from working correctly. If you could get total buy-in to encapsulated styles, you shouldn't face this issue.</li>\\n<li>RxJS takes effort and time to master, and the docs could use a lot of work. We've had to learn about Observables,BehaviorSujects, Subscriptions, and a plethora of operators with difficult names (switchMap, flatMap, zip, idk how many more).</li>\\n<li>‚ÄéThere's no equivalent of React's stateless functional component and that is sad. Sometimes it would be much easier if a component didn't need state and accept only Inputs (props for you React users).</li>\\n<li>The <code>&#x3C;router-outlet></code> prevents you from being able flow data down to Components. This is a HUGE issue and I hate it with a passion.</li>\\n<li>Development Tooling with Angular is severely lacking. Augury was an attempt at dev tools for Angular but is a total failure. Unable to view your Angular component tree or intereact with your data stores makes for a poor DX.</li>\\n</ul>\\n<h2>Conclusion</h2>\\n<p>I've written approximately twice as many \\\"bads\\\" as \\\"goods\\\" for this article, but that doesn't mean I hate Angular. It is definitely a viable option, and still has the backing of Google despite some misteps with branding and architecture. I just hope these issues are something you might analyze before using, or can use your voice and vote to help improve Angular.</p>\",\"id\":\"/Users/cfiloteo/dev/blog/src/pages/2017-11-30-the-good-and-bad-of-angular/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-11-30T00:00:00.000Z\",\"path\":\"/posts/the-good-and-bad-parts-of-angular\",\"tags\":[\"angular\"],\"title\":\"The üëç and üëé parts of Angular\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-the-good-and-bad-parts-of-react-629bb5033354baa78a3b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten and Angular 1 app in React, and have chosen to use Vue for my personal projects for now. These are some of my thoughts on what I found to be some good and bad parts of React.</p>\\n<h3>The Good</h3>\\n<ul>\\n<li>An extremely healthy ecosystem exists around React. This is honestly the biggest win that I love as a developer. Sharable components, alternative libs, build toolkits, and even React alternatives are </li>\\n<li>Testing is amazingly easy, Enzyme's shallow render is awesome!</li>\\n<li>‚Äésmall components</li>\\n<li>‚ÄéPlays nicely with existing js libs, as well as modules</li>\\n<li>Tooling is great, be able interact with your components, data stores is so nice</li>\\n</ul>\\n<h3>The Bad</h3>\\n<ul>\\n<li>decision fatigue</li>\\n<li>‚ÄéRequires understanding of some FP concepts</li>\\n<li>‚ÄéHOCs get out of control</li>\\n</ul>\\n<h2>Conclusion</h2>\",\"frontmatter\":{\"date\":\"November 30, 2017\",\"path\":\"/posts/the-good-and-bad-parts-of-react\",\"tags\":[\"react\"],\"title\":\"The üëç and üëé parts of React\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"I recently started a new job and was able to request a new keyboard. I got the Anne Pro with red switches, and have been mostly in love with it. I still felt like there were some improvements to be made, so I took a stab at it. Foam mod I noticed‚Ä¶\",\"html\":\"<p>I recently started a new job and was able to request a new keyboard. I got the Anne Pro with red switches, and have been mostly in love with it. I still felt like there were some improvements to be made, so I took a stab at it.</p>\\n<h3>Foam mod</h3>\\n<p>I noticed that the plastic case is pretty loud when bottoming out. It sounds like a loud, dull thud. It was honestly not too bad but I'm more of a fan of silent keyboards at work. </p>\\n<p>I was able to get some ¬º\\\" foam padding from a friend, and cut it up to the dimensions of the case bottom. This was pretty straightforward, just cut the holes for the case screws and the reset button. This reduces the thunking greatly. </p>\\n<h3>Replaced switches</h3>\\n<p>I replaced the default Gateron Red switches with some modified Kailh Heavy Dark Yellow switches that I purchased from r/mechmarket for cheaper than retail. 40 of these switches were lubricated and had a 80g springs, the rest were factory stock 70g. </p>\\n<p>Surprisingly, heavy springs are helping me become a better touch typist since its harder to bottom out. My hands do get more tired after typing for a long time, but I don't write novels and even typing this post hasn't fatigued my hands much. </p>\\n<h3>Clipped and stuffed stabilizers</h3>\\n<p>Most of the rattle noise is due to the stabilizers. While the switches were removed, I took apart the stabs. I clipped them to reduce the amount of parts that touch, and \\\"stuffed\\\" them with thin foam padding to reduce the movement even more. They are now much quieter and help me keep my sanity! I wondered if stabilizer grease would have been better but I'm very happy now. </p>\\n<h3>Additional modifications</h3>\\n<p>There are 2 additional modifications I'll be adding in the future: installing a dedicated hardware switch, and changing the firmware.</p>\\n<p>I've already purchased a cheap hardware switch for this and am just waiting for it to arrive. </p>\\n<p>The firmware is still under heavy development and isn't feature-complete enough to use as a daily driver, unfortunately. Keep checking in on this project though. It's making lots of progress!</p>\",\"id\":\"/Users/cfiloteo/dev/blog/src/pages/2018-04-20-anne-pro-mods.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2018-04-20T00:00:00.000Z\",\"path\":\"/posts/anne-pro-mods\",\"tags\":[\"keyboards\"],\"title\":\"Anne Pro mods\"}},\"next\":{\"excerpt\":\"I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten an Angular 1 app in React, and have chosen to use Vue for my personal projects for now‚Ä¶\",\"html\":\"<p>I've yet to reach the point in my career where I'm attached to a single framework. I've used Angular 2+ heavily for the last year at work, have recently rewritten an Angular 1 app in React, and have chosen to use Vue for my personal projects for now. These are some of my thoughts on what I found to be some good and bad parts of Angular.</p>\\n<h3>The Good</h3>\\n<ul>\\n<li>As a full framework, you'll experience less decision fatigue and won't have lib fragmentation (eg. team A uses Axios, team B uses Superagent).</li>\\n<li>‚ÄéTypeScript makes JavaScript feel familiar to backend/full-stack devs.</li>\\n<li>RxJS/‚ÄéObservables are so awesome! This reactive data flow also helps you keep your components UI-focused.</li>\\n<li>‚ÄéThe Angular CLI is fantastic! Its so good, in fact, that it hardly makes sense to use anything else.</li>\\n<li>‚ÄéPredictable and periodic framework updates set a great rhythm. Of course, this is personal preference. I've read some other peoples' struggles with having gotten too far behind... but the cadence with which Angular releases feels just right.</li>\\n<li>The animations API is good when it works. React's TransitionGroup is the equivalent, but most React beginners don't know about it or how to find it to solve animations with components mounting/unmounting. The Angular animations work well for this same usage, but there have been quite a few bugs with it between versions. I had to revert to CSS animations. Hopefully they've been fixed and that has stablized.</li>\\n</ul>\\n<h3>The Bad</h3>\\n<ul>\\n<li>With TypeScript it is easy to bloat your code &#x26; forget to push business logic down to the server.</li>\\n<li>‚ÄéModules+routes are the only option for creating code split boundaries. So far, there hasn't been a community-built solution for code splitting elsewhere.</li>\\n<li>Using Services to manage state is hard. It almost doesn't make sense to have Services and I'm about 90% sure this syntax was carried over for those who have a hard time migrating from Angular 1. Because of this there is little to no standardization on how services should work or be used. We ended up using Services to only hold Observables...</li>\\n<li>‚ÄéGood luck trying to get any native js modules to work. Maybe that lib doesn't have types. Or requires a browser global. Or can't be statically analyzed by the TS compiler... The list goes on.</li>\\n<li>Testing is just BAD. Testing requires 30+ lines of boilerplate, and requires a lot of ceremony. I have not written a test that actually works with Angular that hasn't felt extremely frail. From configuring the TestBed to updating selectors, testing is a huge burden compared to how easy it is with React and Vue.</li>\\n<li>Angular errors are convoluted and imprecise. Welcome to debugging hell. üëø</li>\\n<li>Having a wrapping host element is bad for styling. This is mainly because we have a legacy style framework. One such problem was with a widget that uses immediate child selectors, and the host element prevents this from working correctly. If you could get total buy-in to encapsulated styles, you shouldn't face this issue.</li>\\n<li>RxJS takes effort and time to master, and the docs could use a lot of work. We've had to learn about Observables,BehaviorSujects, Subscriptions, and a plethora of operators with difficult names (switchMap, flatMap, zip, idk how many more).</li>\\n<li>‚ÄéThere's no equivalent of React's stateless functional component and that is sad. Sometimes it would be much easier if a component didn't need state and accept only Inputs (props for you React users).</li>\\n<li>The <code>&#x3C;router-outlet></code> prevents you from being able flow data down to Components. This is a HUGE issue and I hate it with a passion.</li>\\n<li>Development Tooling with Angular is severely lacking. Augury was an attempt at dev tools for Angular but is a total failure. Unable to view your Angular component tree or intereact with your data stores makes for a poor DX.</li>\\n</ul>\\n<h2>Conclusion</h2>\\n<p>I've written approximately twice as many \\\"bads\\\" as \\\"goods\\\" for this article, but that doesn't mean I hate Angular. It is definitely a viable option, and still has the backing of Google despite some misteps with branding and architecture. I just hope these issues are something you might analyze before using, or can use your voice and vote to help improve Angular.</p>\",\"id\":\"/Users/cfiloteo/dev/blog/src/pages/2017-11-30-the-good-and-bad-of-angular/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-11-30T00:00:00.000Z\",\"path\":\"/posts/the-good-and-bad-parts-of-angular\",\"tags\":[\"angular\"],\"title\":\"The üëç and üëé parts of Angular\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-the-good-and-bad-parts-of-react.json\n// module id = 298\n// module chunks = 111649292585113"],"sourceRoot":""}