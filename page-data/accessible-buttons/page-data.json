{"componentChunkName":"component---src-templates-post-js","path":"/accessible-buttons/","webpackCompilationHash":"69a64a7399a1ad7a2bef","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accessible Buttons\",\n  \"date\": \"2019-03-20T00:00:00.000Z\",\n  \"tags\": [\"javascript\", \"a11y\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's 2019 and I still see new code being written which uses non-interactive elements as buttons. Let's rehash why this is a problem. Take this example code of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" that has a click handler bound to it: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"myBtn\\\">Do the thing</div>\\n\\n<script>\\n  const handleClick = (e) => {\\n    console.log('myBtn clicked')\\n  }\\n  const myBtn = document.querySelector('.myBtn')\\n  myBtn.addEventListener('click', handleClick)\\n</script>\\n\")), mdx(\"small\", null, \"Don't get hung up on how the event is being bound; the principles would be the same if you were using jQuery, React, etc.\"), mdx(\"h3\", null, \"Keyboard Accessibility pt 1: Focus\"), mdx(\"p\", null, \"One problem with this non-button is that it cannot receive focus, and therefore cannot be navigated to with a keyboard. This means that there is no way to trigger it without using a mouse and clicking on the element. This can be done with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabindex\"), \" attribute. Setting this attribute to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" adds the element to the document tab order.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"myBtn\\\" tabindex=\\\"0\\\">Do the thing</div>\\n\")), mdx(\"p\", null, \"Now you can tab to this element with your keyboard, and see the keyboard outline when focused on it. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTML buttons are focusable by default.\")), mdx(\"h3\", null, \"Keyboard Accessibility pt 2: Events\"), mdx(\"p\", null, \"Focusing on an element is only half of the keyboard navigation story. The element should also respond to \", mdx(\"kbd\", null, \"Enter\"), \" or \", mdx(\"kbd\", null, \"Space\"), \" key presses to trigger the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'click'\"), \" event.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"{7-13}\",\n    \"{7-13}\": true\n  }), \"<div class=\\\"myBtn\\\" tabindex=\\\"0\\\">Do the thing</div>\\n\\n<script>\\n  const handleClick = (e) => {\\n    console.log('myBtn clicked')\\n  }\\n  const handleKeyboardClick = (fn) => {\\n    return (e) => {\\n      if(e.key === 'Enter' || e.key === ' ') {\\n        return fn(e)\\n      }\\n    }\\n  }\\n  const myBtn = document.querySelector('.myBtn')\\n  myBtn.addEventListener('click', handleClick)\\n  myBtn.addEventListener('keydown', handleKeyboardClick(handleClick))\\n</script>\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleKeyboardClick\"), \" function above is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.sitepoint.com/currying-in-functional-javascript/\"\n  }), \"curried function\"), \" which accepts a function as a parameter (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fn\"), \"), and returns a function that will only allow executing that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fn\"), \" only if the key pressed is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'Enter'\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"' '\"), \" (Space). Using a helper like this allows us to reuse the same handler function for the click event but with the expected keyboard behavior.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTML buttons handle keyboard click events for free.\")), mdx(\"h3\", null, \"Semantic HTML & ARIA\"), mdx(\"p\", null, \"Now that we can reach the element with a keyboard, let's switch to using another assistive device: a screenreader. A screenreader allows a non-visual user to be able to navigate and read the page content. So what happens when such a user navigates to this non-button? \"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/5f37a3863680f76fdec6f30d3eac7021/0794e/dothething-div-sr.png\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"28.52512155591572%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"This screenshot shows that when focused on the non-button element, VoiceOver only identifies the inner text of 'Do the thing'.\",\n    \"title\": \"This screenshot shows that when focused on the non-button element, VoiceOver only identifies the inner text of 'Do the thing'.\",\n    \"src\": \"/static/5f37a3863680f76fdec6f30d3eac7021/b9e4f/dothething-div-sr.png\",\n    \"srcSet\": [\"/static/5f37a3863680f76fdec6f30d3eac7021/cf440/dothething-div-sr.png 148w\", \"/static/5f37a3863680f76fdec6f30d3eac7021/d2d38/dothething-div-sr.png 295w\", \"/static/5f37a3863680f76fdec6f30d3eac7021/b9e4f/dothething-div-sr.png 590w\", \"/static/5f37a3863680f76fdec6f30d3eac7021/0794e/dothething-div-sr.png 617w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"Let's compare this with an actual button.\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/22413e165306dc2d3ba30944854cf1a4/ad08f/dothething-btn-sr.png\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"28.431372549019606%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"In contrast, this screenshot shows that when the button is focused, VoiceOver identifies 'Do the thing, button'.\",\n    \"title\": \"In contrast, this screenshot shows that when the button is focused, VoiceOver identifies 'Do the thing, button'.\",\n    \"src\": \"/static/22413e165306dc2d3ba30944854cf1a4/b9e4f/dothething-btn-sr.png\",\n    \"srcSet\": [\"/static/22413e165306dc2d3ba30944854cf1a4/cf440/dothething-btn-sr.png 148w\", \"/static/22413e165306dc2d3ba30944854cf1a4/d2d38/dothething-btn-sr.png 295w\", \"/static/22413e165306dc2d3ba30944854cf1a4/b9e4f/dothething-btn-sr.png 590w\", \"/static/22413e165306dc2d3ba30944854cf1a4/ad08f/dothething-btn-sr.png 612w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"It shouldn't be any surprise that a div semantically \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\"\n  }), \"\\\"does not ... represent anything\\\"\"), \". It should also be noted that the CSS class name that we're using to select this element offers nothing for assistive tech to identify.\"), mdx(\"p\", null, \"We can fix this by adding the correct aria-role attribute. If you haven't yet read through the \", mdx(\"a\", {\n    className: \"link\",\n    href: \"https://www.w3.org/TR/wai-aria-practices-1.1/\"\n  }, \"WAI-ARIA Authoring Practices\"), \" it is time you did. It outlines the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If this control is a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"push button\"), \", it needs a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role=\\\"button\\\"\"), \" to designate it as an interactive button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"if this control is a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"toggle button\"), \", it needs \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role=\\\"button\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-pressed\"), \" attributes, and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-pressed\"), \" is updated to reflect the current state of the control\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"myBtn\\\" tabindex=\\\"0\\\" role=\\\"button\\\">Do the thing</div>\\n<!--- OR --->\\n<div class=\\\"myBtn\\\" tabindex=\\\"0\\\" role=\\\"button\\\" aria-pressed=\\\"false\\\">Toggle the thing</div>\\n\\n<script>\\n  const handleClick = (e) => {\\n    console.log('myBtn clicked')\\n    // Update aria-pressed for toggle buttons\\n    if(e.target.hasAttribute('aria-pressed')) {\\n      const pressed = e.target.getAttribute('aria-pressed') === 'true'\\n      e.target.setAttribute('aria-pressed', pressed)\\n    }\\n  }\\n  const handleKeyboardClick = (fn) => {\\n    return (e) => {\\n      if(e.key === 'Enter' || e.key === ' ') {\\n        return fn(e)\\n      }\\n    }\\n  }\\n  const myBtn = document.querySelector('.myBtn')\\n  myBtn.addEventListener('click', handleClick)\\n  myBtn.addEventListener('keydown', handleKeyboardClick(handleClick))\\n</script>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"An HTML button would only need the additional \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"aria-pressed\"), \" attribute.\")), mdx(\"h3\", null, \"And a few gotchas\"), mdx(\"p\", null, \"For most use cases, you can actually use a button as a container; one such example is for a clickable card. It can contain an image and a heading and may display additional text when clicked. One possible limitation of this is that technically \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\n  }), \"only phrasing content is permitted within a button\"), \" so no divs or other block-level elements and no other interactive elements (no buttons or anchors inside buttons, duh) can be children. The gotcha here is that when I tested that in current versions of Chrome, Firefox, and Safari, none of them failed to render the div inside the button. Kind of weird, so shy away from it if you can.\"), mdx(\"p\", null, \"Also, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type\"\n  }), \"the default button type is \\\"submit\\\"\"), \" so when creating something like a reusable toggle button component using any modern framework, keep this in mind. If your component may be rendered inside a form and does not have a default set to something other than \\\"submit\\\", it may trigger a submit.\"), mdx(\"p\", null, \"And lastly, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://developer.paciellogroup.com/blog/2011/04/html5-accessibility-chops-just-use-a-button/\"\n  }), \"just\"), \" \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=CZGqnp06DnI\"\n  }), \"use a\"), \" \", mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://formidable.com/blog/2014/05/08/anchors-buttons-and-accessibility/\"\n  }), \"button\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Accessible Buttons","date":"Mar 20, 2019","tags":["javascript","a11y"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/accessible-buttons/"}}}