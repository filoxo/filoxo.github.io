{"componentChunkName":"component---src-templates-post-js","path":"/2017-02-14-build-a-css-framework-using-npm/","webpackCompilationHash":"f4d71ad36708a77d5ac6","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Building a CSS framework using npm\",\n  \"date\": \"2017-02-14T00:00:00.000Z\",\n  \"tags\": [\"javascript\", \"npm\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"25%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundImage\": \"url('data:image/svg+xml,%3csvg%20xmlns=\\\\'http://www.w3.org/2000/svg\\\\'%20width=\\\\'400\\\\'%20height=\\\\'100\\\\'%3e%3cpath%20d=\\\\'M220%204l-1%209v8l1%209a252%20252%200%20013%2019c2%207%202%2015%200%2015v1c2%200%204%203%203%205l1%208%201%2014-2%201-2%201h2l1%203-1%203h6c5%200%205%200%205-2-1-1%200-2%201-2l1%202%201%201h1l25%201h25l1-3c2-4%205-4%206%200v3h45l1-2c0-2%201-3%202-3l2-4c0-4%200-4%202-3%203%200%203%200%204-8l1-10v-2c2-1-1-14-5-24-5-13-12-20-22-26-4-3-5-4-5-6v-1c-2%200-3-3-3-7%200-1%200-2-1-1v4c0%204%200%204-3%204l-3%201h3c8%200%206%206-5%2018l-8%207-5-6c-4-5-15-15-17-14h-1l-3-1c-2%200-2%200-2-4a10312%2010312%200%2000-1-5l-1%206h-6l-6%201h6c5%200%206%200%205%202l-3%204c-3%201-4%204-1%203%202-1%201%201-1%203s-3%202-6%202l-2%201c0%202-2%203-5%203l-3%204c0%203-1%203-3%203-4%200-4%201-1%203%202%202%202%203%200%205l-1%205c0%202%200%202-3%200-5-2-7-1-3%202%202%203%202%203%200%204-2%202-3%202-3%201l-2-1c-2%200-3%200-3-2-1-3-1-3-1%202l-1%207c0%202%200%202%201%201%202-2%202-2%202%200l-2%203c-3%201-5-5-3-6s3-5%201-5c-2%201-4-4-5-15a343%20343%200%2000-1-17v-2c-2-1-3-5-1-5v-1c-1-1-1-13%201-16l-1-2c-1%200-2%201-2%204M88%204v6l1%204H76c-11%200-12%200-15-2-6-6-6-5-8-2l-1%203H23l12%201c11%200%2011%200%2011%202a1184%201184%200%2000-10%2028c-2%200-5%207-5%208l3-3%203-3-5%209c-3%203-4%205-1%205l2%201h-1l-4%208v7c0%205%201%208%203%206%201-1%201-1%201%202l1%204%203%205c0%202%201%203%202%202l3%202v3h65l1-2c0-3%201-3%202-2%203%201%205-3%203-6l-1-5-1-4v-8c1-7%201-8-1-10l-2-3c1-2%200-4-1-4l-1%204c0%203%200%204-3%204-3%201-4%201-6-1a383%20383%200%2000-4-7c1-1%201-1-1-1l-2-1%202-1c2%200%202-2%200-3v-6c0-2%200-2%202-2%204%201%204%200%201-3-2-2-4-12-2-11h1l-1-2v-3l-1-4%201-3h6l6-1-7-1h-6V9c0-5-1-7-3-5m50%207v4h-7c-9%200-9%201%200%201h8v19l1%207v3c0-2%200-2%201-1V16h13c15%200%2015-1%200-1l-12-1-1-3c-1-4-3-4-3%200m35-1l1%206%203%2010c0%206%201%206-5%206-3%201-3%202-1%202l3%201-3%201c-2%200-3-1-3-2l-3%203c-1%203-3%205-4%205v4c-2-1-2-1-1%201v4l1%203h9l-3-1c-3%201-4%201-4-1h3l2-1v-3c1-1%201-1%201%201l2%204c2%202%202%206%201%2012%200%204%200%204-3%203s-5-4-5-5c0-2%202-1%203%201%200%203%201%202%202-1l-1-3-2-2c-1-2-3-3-3-1s-2%201-3-2-1-3-3-1-3%204%200%204c2-1%204%203%202%204v4l-1%201v3c-3%201%200%208%203%207l1%201v3c2%201%202%201%204-1h2l-1%203v2c1%201%205%202%205%200%200-3%2010-6%2012-3%201%202%202-1%202-6l1-4c2-1%201-7-1-8l-1-2v-1l-1%201c-1%202-1%201-1-1l-1-6c0-2%200-2%202-2l3%201-3-2c-2-2-3-4%200-3v-1l-2-2-1-7-4-22v-3l-2-4-1-2-1%202M68%2019l4%204%202%203c1%202%201%202-1%205-3%204-5%209-4%209l1%202c1%203%205%202%208-1%201-3%202-3%202-2l-3%205-3%204h-2l-2-1-2%201-5%201%202%201%208%201-2%201-2%201-2%202-1-2c1-1%201-1-1-1h-2l-1-1-1%205c0%204%203%206%204%202%200-3%202-3%202%200l-2%203c-2%201-2%202-1%205v14l4%201c3%200%207-2%207-4l2-2c3-1%204-6%202-9l-1-2v-3l-2-3-1%203-3%203c-2%200-1-3%201-4l1-2%204-5%203%2013%201%204h2l1-2-1-3v-1c2-1%202-4%200-6l-2-2h2l2-2c0-1-1-2-4-1s-3%200%201-3c3-3%204-7%204-27l1-7-12-1H64l4%204m125%2019l-2%201v1l2%205a1558%201558%200%20005%2040l1%202%202%202%202-1V68c0-1%201-2%202-1l1-1-2-2v-4c-1-2-1-2%202-1%204%202%201-4-4-11l-1-2-3-5c-3-4-5-5-5-3M90%2062v4c-3%205-2%209%201%2012%204%204%204%204%203%201%200-2%200-3%202-3%202-1%202-2%202-4%200-3-3-9-5-10h-3m50%2016c-3%203-3%2011-1%2013l2%201h2c2%202%204%202%204%200v-3h1l1%201%201-1-1-2c-1%200-3-6-2-8%201-3%201-3-1-3l-2%201h-1c0-1-1-1-3%201\\\\'%20fill=\\\\'%23d3d3d3\\\\'%20fill-rule=\\\\'evenodd\\\\'/%3e%3c/svg%3e')\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Leaves\",\n    \"title\": \"Leaves\",\n    \"src\": \"/static/add274474afb2aa4bd26d33be9de68c4/c739e/leaves.jpg\",\n    \"srcSet\": [\"/static/add274474afb2aa4bd26d33be9de68c4/8ee9c/leaves.jpg 148w\", \"/static/add274474afb2aa4bd26d33be9de68c4/ebbe7/leaves.jpg 295w\", \"/static/add274474afb2aa4bd26d33be9de68c4/c739e/leaves.jpg 590w\", \"/static/add274474afb2aa4bd26d33be9de68c4/5413e/leaves.jpg 885w\", \"/static/add274474afb2aa4bd26d33be9de68c4/4efde/leaves.jpg 1180w\", \"/static/add274474afb2aa4bd26d33be9de68c4/c35de/leaves.jpg 1200w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\",\n    \"loading\": \"lazy\"\n  })), \"\\n    \")), mdx(\"p\", null, \"This last weekend I wanted to create a simple CSS framework that I can reuse for my own little projects. The end result is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/filoxo/simple-style\"\n  }), \"Simple Style\"), \" (which is still a WIP as requirements come up). Surprisingly, using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.5w4loc8uy\"\n  }), \"npm as a build tool\"), \" made it extremely easy to set up a dev environment. I'll review everything about the setup in this post for my own documentation, but hopefully can also serve as a clean, straightforward example.\"), mdx(\"p\", null, \"I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://yarnpkg.com/en/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"yarn\")), \" for this experiment instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" solely for the speed improvements. Fortunately, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \"'s commands all have their \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" equivalents so don't get hung up on the differences.\"), mdx(\"p\", null, \"This basic setup offers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Autoprefixing to support the 2 latest browsers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Future CSS syntax usable today\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minification\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"optimizations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a quick and easy development setup to reflect changes on-the-fly\")), mdx(\"h3\", null, \"Dev dependencies\"), mdx(\"p\", null, \"Here are our initial development dependencies:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://necolas.github.io/normalize.css/\"\n  }), \"normalize.css\"), \": so that all elements render consistently\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/postcss/postcss\"\n  }), \"PostCSS\"), \"'s CLI: to leverage its ecosystem of feature plugins\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://cssnext.io/\"\n  }), \"CSSnext\"), \": a PostCSS plugin that helps you to use the latest CSS syntax today. This way the code will be a little more future-proof. Additionally, CSSnext also includes \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/postcss/autoprefixer\"\n  }), \"Autoprefixer\"), \" as a dependency.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"postcss-import\"), \": used to pull in a css file that wasn't being preprocessed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cssnano\"), \": minify and optimize output\")), mdx(\"p\", null, \"Install using yarn (or the npm equivalent)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"yarn add -D normalize.css postcss-cli postcss-cssnext postcss-import cssnano\\n\")), mdx(\"h3\", null, \"PostCSS config\"), mdx(\"p\", null, \"Create a json file that contains the config for PostCSS. The docs named it \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"options.json\"), \" but I choose \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"postcss.json\"), \" for better clarity. The comments below explain some keys.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"{\\n    // Enable plugins in order\\n    \\\"use\\\": [\\n        \\\"postcss-import\\\",\\n        \\\"postcss-cssnext\\\",\\n        \\\"cssnano\\\"\\n    ],\\n    \\\"input\\\": \\\"main.css\\\",\\n    \\\"output\\\": \\\"dist/main.css\\\",\\n    // use locally installed plugins (eg. in node_modules)\\n    \\\"local-plugins\\\": true,\\n    // Enable sourcemaps\\n    \\\"map\\\": true,\\n    // CSSnext and cssnano both use autoprefixer, but for different features/purposes\\n    // see https://github.com/MoOx/postcss-cssnext/issues/323\\n    \\\"postcss-cssnext\\\": {\\n        \\\"warnForDuplicates\\\": false\\n    }\\n}\\n\")), mdx(\"h3\", null, \"CSS time\"), mdx(\"p\", null, \"Go ahead and create \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.css\"), \" at the project root. The above config will output to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist/\"), \". Here's a quick sample to put into the file for now.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"@import('normalize.css');\\n\\n:root {\\n    --color-primary: blue;\\n    --color-secondary: red;\\n}\\n\")), mdx(\"h3\", null, \"Building\"), mdx(\"p\", null, \"Use the postcss-cli with the config file passed in as an arg and save it as an npm script.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"scripts\\\": {\\n    \\\"build\\\": \\\"node_modules/postcss-cli/bin/postcss -c postcss.json\\\"\\n}\\n\")), mdx(\"p\", null, \"Now you can simply run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn run build\"), \" and your css will be processed and output to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dist\"), \". But we can still do better.\"), mdx(\"h3\", null, \"Watch for changes\"), mdx(\"p\", null, \"Enabling watch will auto-transform the css file on changes. Add another npm script, which is exactly the same as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build\"), \" but with the watch flag.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"build:dev\\\": \\\"node_modules/postcss-cli/bin/postcss -c postcss.json -w\\\"\\n\")), mdx(\"h3\", null, \"Livereload\"), mdx(\"p\", null, \"You wouldn't develop a CSS framework without seeing it rendered on a page so let's create a test page for development. Create \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" at the project root and populate it with some HTML, and add a link to your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.css\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<!doctype html>\\n<html lang=\\\"en-US\\\">\\n    <head>\\n        <link rel=\\\"stylesheet\\\" href=\\\"/dist/main.css\\\">\\n    </head>\\n    <body>\\n        <main>Hello world</main>\\n    </body>\\n</html>\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/lr-http-server\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"lr-http-server\")), \" will reload on changes, as well as a functioning http server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"yarn add -D lr-http-server\\n\")), mdx(\"p\", null, \"And then register a new npm script for it\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"reload\\\": \\\"lr-http-server -p 3000\\\"\\n\")), mdx(\"h3\", null, \"Composing scripts\"), mdx(\"p\", null, \"We want the two above scripts to run in parallel so that if either the css or the html file changes the livereload server will do its job. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/npm-run-all\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"npm-run-all\")), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" (parallel) flag does this exactly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"yarn add -D npm-run-all\\n\")), mdx(\"p\", null, \"Join the two tasks together into a single npm script\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"start\\\": \\\"npm-run-all -p build:dev reload\\\"\\n\")), mdx(\"p\", null, \"And then run easily with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"yarn start\\n\")), mdx(\"h3\", null, \"Done!\"), mdx(\"p\", null, \"You're ready to keep going developing your styles inside \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main.css\"), \". Feel free to improve upon this as needed!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Building a CSS framework using npm","date":"Feb 14, 2017","tags":["javascript","npm"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-02-14-build-a-css-framework-using-npm/"}}}