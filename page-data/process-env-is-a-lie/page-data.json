{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/process-env-is-a-lie/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"process.env is a lie\",\n  \"date\": \"2022-02-04T00:00:00.000Z\",\n  \"tags\": [\"javascript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Aside = makeShortcode(\"Aside\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you're a JavaScript developer you've seen some code like this at some point:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if (process.env.NODE_ENV === 'production') {\\n  /* prod stuff here */\\n} else {\\n  /* non-prod stuff */\\n}\\n\")), mdx(\"p\", null, \"Pretty straightforward, this logic says to execute some code if in the production environment and some other code if not. This common pattern is often used to configure code to run conditionally for development-only features like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webpack.js.org/concepts/hot-module-replacement/\"\n  }, \"hot module reloading\"), \" or enabling production-only code like marketing analytics. But... what environment is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" actually a reference to?\"), mdx(\"h3\", null, \"\\\"environment\\\" is relative\"), mdx(\"p\", null, \"From the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nodejs.org/docs/latest-v11.x/api/process.html\"\n  }, \"Node.js documentation\"), \" (emphasis added):\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process\"), \" object is a global that provides information about, and control over, the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"current Node.js process\"), \".\")), mdx(\"p\", null, \"This is especially significant for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"frontend-focused developers\"), \" as we often work with two separate environments without realizing it: the build environment, and the browser environment. Of course, these two aren't interchangable as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"process.env\"), \" does not exist in the browser\"), \" and there are some pitfalls when using it. If you try to execute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" in a devtools console it will throw an error saying \\\"process is not defined\\\".\"), mdx(\"p\", null, \"So... if it doesn't run in the browser, how is it that you can add that code and have it still work? The answer is:\"), mdx(\"h3\", null, \"Bundlers\"), mdx(\"p\", null, \"Your bundler of choice is what is parsing and transforming this syntax. Webpack is (I think) the most widely used bundler though this also applies to others. Webpack 4 and below automatically included a polyfill for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" so this worked out-of-the-box. Also if configured using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webpack.js.org/plugins/define-plugin/\"\n  }, \"DefinePlugin\"), \", this value would actually have been replaced with the current value and no shim would be needed. This could then allow the bundler to check and potentially tree-shaken away conditional code wrapped with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" check. So something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if (process.env.NODE_ENV === 'production') { ... }\\n\")), mdx(\"p\", null, \"would, in development, get transformed into the following\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if ('development' === 'production') { ... }\\n\")), mdx(\"p\", null, \"and then finally evaluated into an impossible condition and could be deleted by the bundler.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if(false) { ... }\\n\")), mdx(\"p\", null, \"As of Webpack 5, this polyfill is no longer automagically provided and relying on it would require configuring a shim yourself. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webpack.js.org/migrate/5/#:~:text=process.env%20is%20Node.js%20specific%20and%20should%20be%20avoided%20in%20frontend%20code.\"\n  }, \"Webpack's v4 to v5 migration documentation\"), \" states:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" is Node.js specific and should be avoided in frontend code.\")), mdx(\"p\", null, \"A good baseline to follow would be to only use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \" for checks that should happen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"at build time only\"), \". If the code is expected to make the check at runtime do not reach for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.env\"), \"! Note that this is specifically for 'frontend code' and not as a rule for ALL JavaScript, as is definitely valid for JS that will be run in Node.\"), mdx(Aside, {\n    info: true,\n    mdxType: \"Aside\"\n  }, mdx(\"p\", null, \"Related: in server-side code, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://12factor.net/config\"\n  }, \"storing the configuration in the environment is actually a best practice\"), \"! This is because it makes the deployment artifacts \\\"portable across environments\\\" which in practice means you don't need to rebuild/recompile for each individual environment.\")), mdx(\"h3\", null, \"Then what do I use?\"), mdx(\"p\", null, \"This can be tricky as the browser as the environment has many APIs available to you and deciding which one depends on what you're looking to achieve. For example, to do a similar \\\"is this a dev environment?\\\" check as in the first codeblock of this article, you might do:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const isBrowser = typeof window !== 'undefined'\\nconst isDevEnv = isBrowser && window.location.hostname.endsWith('.dev') // assuming yourcompany.dev is an option\\nconst isProdEnv = !isDevEnv\\n\")), mdx(\"p\", null, \"Or, you might also be able to server-render configuration values so the document served contains them globally available.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<script>\\n  window.companyConfig = {\\n    env: 'production',\\n    someApiToken: 'SOME_API_TOKEN',\\n    // other configuration values here\\n  }\\n</script>\\n\")), mdx(\"p\", null, \"That's it, that's the post!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"process.env is a lie","date":"04 Feb 22","tags":["javascript"]}}},"pageContext":{"slug":"/process-env-is-a-lie/"}},
    "staticQueryHashes": ["3649515864"]}